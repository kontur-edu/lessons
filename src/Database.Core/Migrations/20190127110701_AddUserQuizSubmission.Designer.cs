// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Migrations
{
    [DbContext(typeof(UlearnDb))]
    [Migration("20190127110701_AddUserQuizSubmission")]
    partial class AddUserQuizSubmission
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Database.Models.AdditionalScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("InstructorId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("Score");

                    b.Property<string>("ScoringGroupId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTime>("Timestamp");

                    b.Property<Guid>("UnitId");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UserId");

                    b.HasIndex("CourseId", "UserId");

                    b.HasIndex("CourseId", "UserId", "UnitId", "ScoringGroupId")
                        .IsUnique();

                    b.ToTable("AdditionalScores");
                });

            modelBuilder.Entity("Database.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AvatarUrl");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<short?>("Gender");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("KonturLogin")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("LastConfirmationEmailTime");

                    b.Property<DateTime?>("LastEdit");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Names")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<DateTime>("Registered");

                    b.Property<string>("SecurityStamp");

                    b.Property<long?>("TelegramChatId");

                    b.Property<string>("TelegramChatTitle")
                        .HasMaxLength(200);

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TelegramChatId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Database.Models.AutomaticExerciseChecking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckingAgentName")
                        .HasMaxLength(256);

                    b.Property<string>("CompilationErrorHash")
                        .HasMaxLength(40);

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("DisplayName");

                    b.Property<TimeSpan?>("Elapsed");

                    b.Property<string>("ExecutionServiceName")
                        .HasMaxLength(40);

                    b.Property<bool>("IsCompilationError");

                    b.Property<bool>("IsRightAnswer");

                    b.Property<string>("OutputHash")
                        .HasMaxLength(40);

                    b.Property<int>("Score");

                    b.Property<Guid>("SlideId");

                    b.Property<int>("Status");

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CompilationErrorHash");

                    b.HasIndex("IsRightAnswer");

                    b.HasIndex("OutputHash");

                    b.HasIndex("UserId");

                    b.HasIndex("CourseId", "SlideId");

                    b.HasIndex("CourseId", "UserId");

                    b.HasIndex("CourseId", "SlideId", "Timestamp");

                    b.HasIndex("CourseId", "SlideId", "UserId");

                    b.ToTable("AutomaticExerciseCheckings");
                });

            modelBuilder.Entity("Database.Models.AutomaticQuizChecking", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("Score");

                    b.Property<Guid>("SlideId");

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("CourseId", "SlideId");

                    b.HasIndex("CourseId", "UserId");

                    b.HasIndex("CourseId", "SlideId", "Timestamp");

                    b.HasIndex("CourseId", "SlideId", "UserId");

                    b.ToTable("AutomaticQuizCheckings");
                });

            modelBuilder.Entity("Database.Models.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("InstructorId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPreview");

                    b.Property<string>("Parameters")
                        .IsRequired();

                    b.Property<Guid>("TemplateId");

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Database.Models.CertificateTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArchiveName")
                        .IsRequired();

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CertificateTemplates");
                });

            modelBuilder.Entity("Database.Models.Comments.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsCorrectAnswer");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsForInstructorsOnly");

                    b.Property<bool>("IsPinnedToTop");

                    b.Property<int>("ParentCommentId");

                    b.Property<DateTime>("PublishTime");

                    b.Property<Guid>("SlideId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SlideId");

                    b.HasIndex("AuthorId", "PublishTime");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Database.Models.Comments.CommentLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentId");

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId", "CommentId")
                        .IsUnique();

                    b.ToTable("CommentLikes");
                });

            modelBuilder.Entity("Database.Models.Comments.CommentsPolicy", b =>
                {
                    b.Property<string>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64);

                    b.Property<bool>("IsCommentsEnabled");

                    b.Property<int>("ModerationPolicy");

                    b.Property<bool>("OnlyInstructorsCanReply");

                    b.HasKey("CourseId");

                    b.ToTable("CommentsPolicies");
                });

            modelBuilder.Entity("Database.Models.CourseAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("AccessType");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTime>("GrantTime");

                    b.Property<string>("GrantedById")
                        .HasMaxLength(64);

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("UserId")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("GrantTime");

                    b.HasIndex("GrantedById");

                    b.HasIndex("UserId");

                    b.HasIndex("CourseId", "IsEnabled");

                    b.HasIndex("CourseId", "UserId", "IsEnabled");

                    b.ToTable("CourseAccesses");
                });

            modelBuilder.Entity("Database.Models.CourseRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseId")
                        .IsRequired();

                    b.Property<int>("Role");

                    b.Property<string>("UserId")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Database.Models.CourseVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTime>("LoadingTime");

                    b.Property<DateTime?>("PublishTime");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CourseId", "LoadingTime");

                    b.HasIndex("CourseId", "PublishTime");

                    b.ToTable("CourseVersions");
                });

            modelBuilder.Entity("Database.Models.EnabledAdditionalScoringGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId");

                    b.Property<string>("ScoringGroupId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("EnabledAdditionalScoringGroups");
                });

            modelBuilder.Entity("Database.Models.ExerciseCodeReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddingTime");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Comment")
                        .IsRequired();

                    b.Property<int?>("ExerciseCheckingId");

                    b.Property<int>("FinishLine");

                    b.Property<int>("FinishPosition");

                    b.Property<bool>("HiddenFromTopComments");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("StartLine");

                    b.Property<int>("StartPosition");

                    b.Property<int?>("SubmissionId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ExerciseCheckingId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("ExerciseCodeReviews");
                });

            modelBuilder.Entity("Database.Models.ExerciseCodeReviewComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddingTime");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ReviewId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AddingTime");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ReviewId", "IsDeleted");

                    b.ToTable("ExerciseCodeReviewComments");
                });

            modelBuilder.Entity("Database.Models.ExerciseSolutionByGrader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ClientId");

                    b.Property<string>("ClientUserId")
                        .IsRequired();

                    b.Property<int>("SubmissionId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("ExerciseSolutionByGraders");
                });

            modelBuilder.Entity("Database.Models.FeedViewTimestamp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Timestamp");

                    b.Property<int?>("TransportId");

                    b.Property<string>("UserId")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("Timestamp");

                    b.HasIndex("TransportId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "TransportId");

                    b.ToTable("FeedViewTimestamps");
                });

            modelBuilder.Entity("Database.Models.GraderClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GraderClients");
                });

            modelBuilder.Entity("Database.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanUsersSeeGroupProgress");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<bool>("DefaultProhibitFutherReview");

                    b.Property<Guid>("InviteHash");

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsInviteLinkEnabled");

                    b.Property<bool>("IsManualCheckingEnabled");

                    b.Property<bool>("IsManualCheckingEnabledForOldSolutions");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("InviteHash");

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Database.Models.GroupAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("AccessType");

                    b.Property<DateTime>("GrantTime");

                    b.Property<string>("GrantedById")
                        .HasMaxLength(64);

                    b.Property<int>("GroupId");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("UserId")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("GrantTime");

                    b.HasIndex("GrantedById");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.HasIndex("GroupId", "IsEnabled");

                    b.HasIndex("GroupId", "UserId", "IsEnabled");

                    b.ToTable("GroupAccesses");
                });

            modelBuilder.Entity("Database.Models.GroupLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorHex")
                        .HasMaxLength(6);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("OwnerId", "IsDeleted");

                    b.ToTable("GroupLabels");
                });

            modelBuilder.Entity("Database.Models.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddingTime");

                    b.Property<int>("GroupId");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("Database.Models.LabelOnGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId");

                    b.Property<int>("LabelId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("LabelId");

                    b.HasIndex("GroupId", "LabelId")
                        .IsUnique();

                    b.ToTable("LabelOnGroups");
                });

            modelBuilder.Entity("Database.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SubmissionId");

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.HasIndex("UserId", "SubmissionId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Database.Models.LtiConsumer", b =>
                {
                    b.Property<int>("ConsumerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("ConsumerId");

                    b.HasIndex("Key");

                    b.ToTable("LtiConsumers");
                });

            modelBuilder.Entity("Database.Models.LtiSlideRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Request")
                        .IsRequired();

                    b.Property<Guid>("SlideId");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("RequestId");

                    b.HasIndex("CourseId", "SlideId", "UserId");

                    b.ToTable("LtiSlideRequests");
                });

            modelBuilder.Entity("Database.Models.ManualExerciseChecking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsChecked");

                    b.Property<string>("LockedById")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("LockedUntil");

                    b.Property<bool>("ProhibitFurtherManualCheckings");

                    b.Property<int>("Score");

                    b.Property<Guid>("SlideId");

                    b.Property<int>("SubmissionId");

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("LockedById");

                    b.HasIndex("SubmissionId");

                    b.HasIndex("UserId");

                    b.HasIndex("CourseId", "SlideId");

                    b.HasIndex("CourseId", "UserId");

                    b.HasIndex("CourseId", "SlideId", "Timestamp");

                    b.HasIndex("CourseId", "SlideId", "UserId", "ProhibitFurtherManualCheckings");

                    b.ToTable("ManualExerciseCheckings");
                });

            modelBuilder.Entity("Database.Models.ManualQuizChecking", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsChecked");

                    b.Property<string>("LockedById")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("LockedUntil");

                    b.Property<int>("Score");

                    b.Property<Guid>("SlideId");

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("LockedById");

                    b.HasIndex("UserId");

                    b.HasIndex("CourseId", "SlideId");

                    b.HasIndex("CourseId", "UserId");

                    b.HasIndex("CourseId", "SlideId", "Timestamp");

                    b.HasIndex("CourseId", "SlideId", "UserId");

                    b.ToTable("ManualQuizCheckings");
                });

            modelBuilder.Entity("Database.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AreDeliveriesCreated");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("InitiatedById")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("AreDeliveriesCreated");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("InitiatedById");

                    b.ToTable("Notifications");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Notification");
                });

            modelBuilder.Entity("Database.Models.NotificationDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("FailsCount");

                    b.Property<DateTime?>("NextTryTime");

                    b.Property<int>("NotificationId");

                    b.Property<int>("NotificationTransportId");

                    b.Property<byte>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("NextTryTime");

                    b.HasIndex("NotificationTransportId");

                    b.HasIndex("NotificationId", "NotificationTransportId");

                    b.ToTable("NotificationDeliveries");
                });

            modelBuilder.Entity("Database.Models.NotificationTransport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("UserId")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "IsDeleted");

                    b.ToTable("NotificationTransports");

                    b.HasDiscriminator<string>("Discriminator").HasValue("NotificationTransport");
                });

            modelBuilder.Entity("Database.Models.NotificationTransportSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseId")
                        .HasMaxLength(100);

                    b.Property<bool>("IsEnabled");

                    b.Property<int>("NotificationTransportId");

                    b.Property<short>("NotificationType");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("NotificationTransportId");

                    b.HasIndex("NotificationType");

                    b.HasIndex("CourseId", "NotificationType");

                    b.ToTable("NotificationTransportSettings");
                });

            modelBuilder.Entity("Database.Models.Quizzes.UserQuizAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BlockId")
                        .HasMaxLength(64);

                    b.Property<bool>("IsRightAnswer");

                    b.Property<string>("ItemId")
                        .HasMaxLength(64);

                    b.Property<int>("QuizBlockMaxScore");

                    b.Property<int>("QuizBlockScore");

                    b.Property<int>("SubmissionId");

                    b.Property<string>("Text")
                        .HasMaxLength(8192);

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("SubmissionId", "BlockId");

                    b.ToTable("UserQuizAnswers");
                });

            modelBuilder.Entity("Database.Models.Quizzes.UserQuizSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<Guid>("SlideId");

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("CourseId", "SlideId");

                    b.HasIndex("CourseId", "SlideId", "Timestamp");

                    b.HasIndex("CourseId", "SlideId", "UserId");

                    b.ToTable("UserQuizSubmissions");
                });

            modelBuilder.Entity("Database.Models.RestoreRequest", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RestoreRequests");
                });

            modelBuilder.Entity("Database.Models.SlideHint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("HintId");

                    b.Property<bool>("IsHintHelped");

                    b.Property<Guid>("SlideId");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("CourseId", "SlideId", "HintId", "UserId", "IsHintHelped");

                    b.ToTable("SlideHints");
                });

            modelBuilder.Entity("Database.Models.SlideRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("Rate");

                    b.Property<Guid>("SlideId");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("SlideId", "UserId");

                    b.ToTable("SlideRates");
                });

            modelBuilder.Entity("Database.Models.StepikAccessToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("AddedTime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("AddedTime");

                    b.HasIndex("UserId");

                    b.ToTable("StepikAccessTokens");
                });

            modelBuilder.Entity("Database.Models.StepikExportProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("FinishTime");

                    b.Property<bool>("IsFinished");

                    b.Property<bool>("IsInitialExport");

                    b.Property<bool>("IsSuccess");

                    b.Property<string>("Log");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("StepikCourseId");

                    b.Property<string>("StepikCourseTitle")
                        .HasMaxLength(100);

                    b.Property<string>("UlearnCourseId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("StepikExportProcesses");
                });

            modelBuilder.Entity("Database.Models.StepikExportSlideAndStepMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("SlideId");

                    b.Property<string>("SlideXml")
                        .IsRequired();

                    b.Property<int>("StepId");

                    b.Property<int>("StepikCourseId");

                    b.Property<string>("UlearnCourseId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("UlearnCourseId");

                    b.HasIndex("UlearnCourseId", "SlideId");

                    b.HasIndex("UlearnCourseId", "StepikCourseId");

                    b.ToTable("StepikExportSlideAndStepMaps");
                });

            modelBuilder.Entity("Database.Models.SystemAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("AccessType");

                    b.Property<DateTime>("GrantTime");

                    b.Property<string>("GrantedById")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("GrantTime");

                    b.HasIndex("GrantedById");

                    b.HasIndex("IsEnabled");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "IsEnabled");

                    b.ToTable("SystemAccesses");
                });

            modelBuilder.Entity("Database.Models.TextBlob", b =>
                {
                    b.Property<string>("Hash")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40);

                    b.Property<string>("Text");

                    b.HasKey("Hash");

                    b.ToTable("TextBlobs");
                });

            modelBuilder.Entity("Database.Models.UnitAppearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTime>("PublishTime");

                    b.Property<Guid>("UnitId");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CourseId", "PublishTime");

                    b.ToTable("UnitAppearances");
                });

            modelBuilder.Entity("Database.Models.UserExerciseSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AntiPlagiarismSubmissionId");

                    b.Property<int?>("AutomaticCheckingId");

                    b.Property<bool>("AutomaticCheckingIsRightAnswer");

                    b.Property<int>("CodeHash");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<short>("Language");

                    b.Property<Guid>("SlideId");

                    b.Property<string>("SolutionCodeHash")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("AntiPlagiarismSubmissionId");

                    b.HasIndex("AutomaticCheckingId");

                    b.HasIndex("AutomaticCheckingIsRightAnswer");

                    b.HasIndex("Language");

                    b.HasIndex("SolutionCodeHash");

                    b.HasIndex("UserId");

                    b.HasIndex("CourseId", "AutomaticCheckingIsRightAnswer");

                    b.HasIndex("CourseId", "SlideId");

                    b.HasIndex("CourseId", "SlideId", "AutomaticCheckingIsRightAnswer");

                    b.HasIndex("CourseId", "SlideId", "Timestamp");

                    b.HasIndex("CourseId", "SlideId", "UserId");

                    b.ToTable("UserExerciseSubmissions");
                });

            modelBuilder.Entity("Database.Models.UserQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseId")
                        .HasMaxLength(64);

                    b.Property<string>("Question")
                        .IsRequired();

                    b.Property<Guid>("SlideId");

                    b.Property<string>("SlideTitle")
                        .IsRequired();

                    b.Property<DateTime>("Time");

                    b.Property<string>("UnitName")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserQuestions");
                });

            modelBuilder.Entity("Database.Models.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttemptsCount");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("HasManualChecking");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsPassed");

                    b.Property<bool>("IsSkipped");

                    b.Property<int>("Score");

                    b.Property<Guid>("SlideId");

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("SlideId", "Timestamp");

                    b.HasIndex("SlideId", "UserId");

                    b.HasIndex("CourseId", "SlideId", "UserId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("Database.Models.XQueueExerciseSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsResultSent");

                    b.Property<int>("SubmissionId");

                    b.Property<int>("WatcherId");

                    b.Property<string>("XQueueHeader")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.HasIndex("WatcherId");

                    b.ToTable("XQueueExerciseSubmissions");
                });

            modelBuilder.Entity("Database.Models.XQueueWatcher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaseUrl")
                        .IsRequired();

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("QueueName")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("XQueueWatchers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Database.Models.AddedInstructorNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<string>("AddedUserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasIndex("AddedUserId");

                    b.HasDiscriminator().HasValue("AddedInstructorNotification");
                });

            modelBuilder.Entity("Database.Models.CourseExportedToStepikNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<int>("ProcessId");

                    b.HasIndex("ProcessId");

                    b.HasDiscriminator().HasValue("CourseExportedToStepikNotification");
                });

            modelBuilder.Entity("Database.Models.CreatedGroupNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<int>("GroupId")
                        .HasColumnName("CreatedGroupNotification_GroupId");

                    b.HasIndex("GroupId");

                    b.HasDiscriminator().HasValue("CreatedGroupNotification");
                });

            modelBuilder.Entity("Database.Models.GrantedAccessToGroupNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<int>("AccessId");

                    b.HasIndex("AccessId");

                    b.HasDiscriminator().HasValue("GrantedAccessToGroupNotification");
                });

            modelBuilder.Entity("Database.Models.GroupMemberHasBeenRemovedNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupMemberHasBeenRemovedNotification_GroupId");

                    b.Property<string>("UserId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("GroupMemberHasBeenRemovedNotification");
                });

            modelBuilder.Entity("Database.Models.GroupMembersHaveBeenAddedNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupId");

                    b.Property<string>("UserDescriptions")
                        .HasColumnName("UserDescriptions");

                    b.Property<string>("UserIds")
                        .HasColumnName("UserIds");

                    b.HasIndex("GroupId")
                        .HasName("IX_Notifications_GroupId1");

                    b.HasDiscriminator().HasValue("GroupMembersHaveBeenAddedNotification");
                });

            modelBuilder.Entity("Database.Models.GroupMembersHaveBeenRemovedNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupId");

                    b.Property<string>("UserDescriptions")
                        .HasColumnName("UserDescriptions");

                    b.Property<string>("UserIds")
                        .HasColumnName("UserIds");

                    b.HasIndex("GroupId")
                        .HasName("IX_Notifications_GroupId2");

                    b.HasDiscriminator().HasValue("GroupMembersHaveBeenRemovedNotification");
                });

            modelBuilder.Entity("Database.Models.InstructorMessageNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasDiscriminator().HasValue("InstructorMessageNotification");
                });

            modelBuilder.Entity("Database.Models.JoinedToYourGroupNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<int>("GroupId")
                        .HasColumnName("JoinedToYourGroupNotification_GroupId");

                    b.Property<string>("JoinedUserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasIndex("GroupId");

                    b.HasIndex("JoinedUserId");

                    b.HasDiscriminator().HasValue("JoinedToYourGroupNotification");
                });

            modelBuilder.Entity("Database.Models.LikedYourCommentNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<int>("CommentId")
                        .HasColumnName("CommentId1");

                    b.Property<string>("LikedUserId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasIndex("CommentId");

                    b.HasIndex("LikedUserId");

                    b.HasDiscriminator().HasValue("LikedYourCommentNotification");
                });

            modelBuilder.Entity("Database.Models.NewCommentForInstructorsOnlyNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<int>("CommentId")
                        .HasColumnName("CommentId1");

                    b.HasIndex("CommentId")
                        .HasName("IX_Notifications_CommentId11");

                    b.HasDiscriminator().HasValue("NewCommentForInstructorsOnlyNotification");
                });

            modelBuilder.Entity("Database.Models.NewCommentNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<int>("CommentId")
                        .HasColumnName("CommentId1");

                    b.HasIndex("CommentId");

                    b.HasDiscriminator().HasValue("NewCommentNotification");
                });

            modelBuilder.Entity("Database.Models.PassedManualExerciseCheckingNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<int>("CheckingId");

                    b.Property<bool>("IsRecheck");

                    b.HasIndex("CheckingId");

                    b.HasDiscriminator().HasValue("PassedManualExerciseCheckingNotification");
                });

            modelBuilder.Entity("Database.Models.PassedManualQuizCheckingNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<int>("CheckingId")
                        .HasColumnName("PassedManualQuizCheckingNotification_CheckingId");

                    b.HasIndex("CheckingId");

                    b.HasDiscriminator().HasValue("PassedManualQuizCheckingNotification");
                });

            modelBuilder.Entity("Database.Models.PublishedPackageNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<Guid>("CourseVersionId");

                    b.HasIndex("CourseVersionId");

                    b.HasDiscriminator().HasValue("PublishedPackageNotification");
                });

            modelBuilder.Entity("Database.Models.ReceivedAdditionalScoreNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<int?>("ScoreId");

                    b.HasIndex("ScoreId");

                    b.HasDiscriminator().HasValue("ReceivedAdditionalScoreNotification");
                });

            modelBuilder.Entity("Database.Models.ReceivedCertificateNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<Guid>("CertificateId");

                    b.HasIndex("CertificateId");

                    b.HasDiscriminator().HasValue("ReceivedCertificateNotification");
                });

            modelBuilder.Entity("Database.Models.ReceivedCommentToCodeReviewNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<int?>("CommentId")
                        .HasColumnName("CommentId");

                    b.HasIndex("CommentId");

                    b.HasDiscriminator().HasValue("ReceivedCommentToCodeReviewNotification");
                });

            modelBuilder.Entity("Database.Models.RepliedToYourCommentNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<int>("CommentId")
                        .HasColumnName("CommentId1");

                    b.Property<int>("ParentCommentId");

                    b.HasIndex("CommentId");

                    b.HasIndex("ParentCommentId");

                    b.HasDiscriminator().HasValue("RepliedToYourCommentNotification");
                });

            modelBuilder.Entity("Database.Models.RevokedAccessToGroupNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<int>("AccessId")
                        .HasColumnName("RevokedAccessToGroupNotification_AccessId");

                    b.HasIndex("AccessId");

                    b.HasDiscriminator().HasValue("RevokedAccessToGroupNotification");
                });

            modelBuilder.Entity("Database.Models.SystemMessageNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("SystemMessageNotification_Text");

                    b.HasDiscriminator().HasValue("SystemMessageNotification");
                });

            modelBuilder.Entity("Database.Models.UploadedPackageNotification", b =>
                {
                    b.HasBaseType("Database.Models.Notification");

                    b.Property<Guid>("CourseVersionId")
                        .HasColumnName("UploadedPackageNotification_CourseVersionId");

                    b.HasIndex("CourseVersionId");

                    b.HasDiscriminator().HasValue("UploadedPackageNotification");
                });

            modelBuilder.Entity("Database.Models.FeedNotificationTransport", b =>
                {
                    b.HasBaseType("Database.Models.NotificationTransport");

                    b.HasDiscriminator().HasValue("FeedNotificationTransport");
                });

            modelBuilder.Entity("Database.Models.MailNotificationTransport", b =>
                {
                    b.HasBaseType("Database.Models.NotificationTransport");

                    b.HasDiscriminator().HasValue("MailNotificationTransport");
                });

            modelBuilder.Entity("Database.Models.TelegramNotificationTransport", b =>
                {
                    b.HasBaseType("Database.Models.NotificationTransport");

                    b.HasDiscriminator().HasValue("TelegramNotificationTransport");
                });

            modelBuilder.Entity("Database.Models.AdditionalScore", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.AutomaticExerciseChecking", b =>
                {
                    b.HasOne("Database.Models.TextBlob", "CompilationError")
                        .WithMany()
                        .HasForeignKey("CompilationErrorHash");

                    b.HasOne("Database.Models.TextBlob", "Output")
                        .WithMany()
                        .HasForeignKey("OutputHash");

                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.AutomaticQuizChecking", b =>
                {
                    b.HasOne("Database.Models.Quizzes.UserQuizSubmission", "Submission")
                        .WithOne("AutomaticChecking")
                        .HasForeignKey("Database.Models.AutomaticQuizChecking", "Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.Certificate", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.CertificateTemplate", "Template")
                        .WithMany("Certificates")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.Comments.Comment", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.Comments.CommentLike", b =>
                {
                    b.HasOne("Database.Models.Comments.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.CourseAccess", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "GrantedBy")
                        .WithMany()
                        .HasForeignKey("GrantedById");

                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Database.Models.CourseRole", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.CourseVersion", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.EnabledAdditionalScoringGroup", b =>
                {
                    b.HasOne("Database.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.ExerciseCodeReview", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.ManualExerciseChecking", "ExerciseChecking")
                        .WithMany("Reviews")
                        .HasForeignKey("ExerciseCheckingId");

                    b.HasOne("Database.Models.UserExerciseSubmission", "Submission")
                        .WithMany("Reviews")
                        .HasForeignKey("SubmissionId");
                });

            modelBuilder.Entity("Database.Models.ExerciseCodeReviewComment", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.ExerciseCodeReview", "Review")
                        .WithMany("Comments")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.ExerciseSolutionByGrader", b =>
                {
                    b.HasOne("Database.Models.GraderClient", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.UserExerciseSubmission", "Submission")
                        .WithMany()
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.FeedViewTimestamp", b =>
                {
                    b.HasOne("Database.Models.NotificationTransport", "Transport")
                        .WithMany()
                        .HasForeignKey("TransportId");
                });

            modelBuilder.Entity("Database.Models.GraderClient", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.Group", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.GroupAccess", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "GrantedBy")
                        .WithMany()
                        .HasForeignKey("GrantedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.GroupLabel", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.GroupMember", b =>
                {
                    b.HasOne("Database.Models.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.LabelOnGroup", b =>
                {
                    b.HasOne("Database.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.GroupLabel", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.Like", b =>
                {
                    b.HasOne("Database.Models.UserExerciseSubmission", "Submission")
                        .WithMany("Likes")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.ManualExerciseChecking", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "LockedBy")
                        .WithMany()
                        .HasForeignKey("LockedById");

                    b.HasOne("Database.Models.UserExerciseSubmission", "Submission")
                        .WithMany("ManualCheckings")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.ManualQuizChecking", b =>
                {
                    b.HasOne("Database.Models.Quizzes.UserQuizSubmission", "Submission")
                        .WithOne("ManualChecking")
                        .HasForeignKey("Database.Models.ManualQuizChecking", "Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.ApplicationUser", "LockedBy")
                        .WithMany()
                        .HasForeignKey("LockedById");

                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.Notification", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "InitiatedBy")
                        .WithMany()
                        .HasForeignKey("InitiatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.NotificationDelivery", b =>
                {
                    b.HasOne("Database.Models.Notification", "Notification")
                        .WithMany("Deliveries")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.NotificationTransport", "NotificationTransport")
                        .WithMany()
                        .HasForeignKey("NotificationTransportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.NotificationTransport", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.NotificationTransportSettings", b =>
                {
                    b.HasOne("Database.Models.NotificationTransport", "NotificationTransport")
                        .WithMany()
                        .HasForeignKey("NotificationTransportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.Quizzes.UserQuizAnswer", b =>
                {
                    b.HasOne("Database.Models.Quizzes.UserQuizSubmission", "Submission")
                        .WithMany()
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.Quizzes.UserQuizSubmission", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.RestoreRequest", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.SlideHint", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.SlideRate", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.StepikAccessToken", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.StepikExportProcess", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.SystemAccess", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "GrantedBy")
                        .WithMany()
                        .HasForeignKey("GrantedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.UserExerciseSubmission", b =>
                {
                    b.HasOne("Database.Models.AutomaticExerciseChecking", "AutomaticChecking")
                        .WithMany()
                        .HasForeignKey("AutomaticCheckingId");

                    b.HasOne("Database.Models.TextBlob", "SolutionCode")
                        .WithMany()
                        .HasForeignKey("SolutionCodeHash")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.UserQuestion", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.Visit", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.XQueueExerciseSubmission", b =>
                {
                    b.HasOne("Database.Models.UserExerciseSubmission", "Submission")
                        .WithMany()
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.XQueueWatcher", "Watcher")
                        .WithMany()
                        .HasForeignKey("WatcherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.XQueueWatcher", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.ApplicationUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.AddedInstructorNotification", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "AddedUser")
                        .WithMany()
                        .HasForeignKey("AddedUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.CourseExportedToStepikNotification", b =>
                {
                    b.HasOne("Database.Models.StepikExportProcess", "Process")
                        .WithMany()
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.CreatedGroupNotification", b =>
                {
                    b.HasOne("Database.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.GrantedAccessToGroupNotification", b =>
                {
                    b.HasOne("Database.Models.GroupAccess", "Access")
                        .WithMany()
                        .HasForeignKey("AccessId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.GroupMemberHasBeenRemovedNotification", b =>
                {
                    b.HasOne("Database.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.GroupMembersHaveBeenAddedNotification", b =>
                {
                    b.HasOne("Database.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_Notifications_Groups_GroupId1")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.GroupMembersHaveBeenRemovedNotification", b =>
                {
                    b.HasOne("Database.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_Notifications_Groups_GroupId2")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.JoinedToYourGroupNotification", b =>
                {
                    b.HasOne("Database.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.ApplicationUser", "JoinedUser")
                        .WithMany()
                        .HasForeignKey("JoinedUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.LikedYourCommentNotification", b =>
                {
                    b.HasOne("Database.Models.Comments.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.ApplicationUser", "LikedUser")
                        .WithMany()
                        .HasForeignKey("LikedUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.NewCommentForInstructorsOnlyNotification", b =>
                {
                    b.HasOne("Database.Models.Comments.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_Notifications_Comments_CommentId11")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.NewCommentNotification", b =>
                {
                    b.HasOne("Database.Models.Comments.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.PassedManualExerciseCheckingNotification", b =>
                {
                    b.HasOne("Database.Models.ManualExerciseChecking", "Checking")
                        .WithMany()
                        .HasForeignKey("CheckingId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.PassedManualQuizCheckingNotification", b =>
                {
                    b.HasOne("Database.Models.ManualQuizChecking", "Checking")
                        .WithMany()
                        .HasForeignKey("CheckingId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.PublishedPackageNotification", b =>
                {
                    b.HasOne("Database.Models.CourseVersion", "CourseVersion")
                        .WithMany()
                        .HasForeignKey("CourseVersionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.ReceivedAdditionalScoreNotification", b =>
                {
                    b.HasOne("Database.Models.AdditionalScore", "Score")
                        .WithMany()
                        .HasForeignKey("ScoreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.ReceivedCertificateNotification", b =>
                {
                    b.HasOne("Database.Models.Certificate", "Certificate")
                        .WithMany()
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.ReceivedCommentToCodeReviewNotification", b =>
                {
                    b.HasOne("Database.Models.ExerciseCodeReviewComment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId");
                });

            modelBuilder.Entity("Database.Models.RepliedToYourCommentNotification", b =>
                {
                    b.HasOne("Database.Models.Comments.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.Comments.Comment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.RevokedAccessToGroupNotification", b =>
                {
                    b.HasOne("Database.Models.GroupAccess", "Access")
                        .WithMany()
                        .HasForeignKey("AccessId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.UploadedPackageNotification", b =>
                {
                    b.HasOne("Database.Models.CourseVersion", "CourseVersion")
                        .WithMany()
                        .HasForeignKey("CourseVersionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
