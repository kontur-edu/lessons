@using Database.Extensions
@using Database.Models
@using Microsoft.AspNet.Identity
@using uLearn.Web.Extensions
@using uLearn.Web.Views.Shared
@using Ulearn.Common
@using Ulearn.Common.Extensions
@using FormMethod = System.Web.Mvc.FormMethod

@model uLearn.Web.Controllers.CertificatesViewModel

@{
	ViewBag.Title = "Сертификаты курса " + Model.Course.Title;
}

@{
	var canEditTemplates = User.HasAccessFor(Model.Course.Id, CourseRole.CourseAdmin);
}

<div class="container">
	<h1>
		Сертификаты
		@if (canEditTemplates)
		{
			<small>
				<a href="" class="create-template-link  internal-page-link">новый шаблон</a>
			</small>
		}
	</h1>

	@if (!Model.Templates.Any())
	{
		if (canEditTemplates)
		{
			<div>Загрузите первый шаблон, чтобы выдавать сертификаты отличившимся студентам.</div>
		}
		else
		{
			<div>Администраторы курса могут загрузить шаблон сертификата.</div>
		}
	}

	@foreach (var template in Model.Templates.Values.OrderByDescending(t => t.Timestamp))
	{
		<div class="certificate-template" id="template-@template.Id">
			<h3 class="certificate-template__title">
				@if (canEditTemplates)
				{
					<a href=""
						class="edit-template-link  internal-page-link"
						title="Редактировать шаблон"
						data-template-id="@template.Id"
						data-template-name="@template.Name"
						data-template-url="@Url.Action("DownloadCertificateTemplate", new { courseId = template.CourseId, templateId = template.Id })">
						@template.Name</a>
				}
				else
				{
					<span>@template.Name</span>
				}
				&nbsp;
				<span class="text-muted">
					@Model.Certificates.GetOrDefault(template.Id, new List<Certificate>()).Count.PluralizeInRussian(new RussianPluralizationOptions
					{
						One = "сертификат",
						Two = "сертификата",
						Five = "сертификатов",
						Gender = Gender.Male,
						hideNumberOne = false,
						smallNumbersAreWords = false,
					})
				</span>
			</h3>

			@using (Html.BeginForm("AddCertificate", "Admin", FormMethod.Post, new { @class = "form form-horizontal" }))
			{
				@Html.Hidden("courseId", Model.Course.Id)
				@Html.Hidden("templateId", template.Id)
				@Html.Hidden("isPreview", false)
				@Html.Hidden("userId")
				<div>
					<input type="text"
							class="add-certificate-input form-control ib"
							data-url="@Url.Action("FindUsers", "Admin", new { courseId = Model.Course.Id, onlyInstructors = false })"
							placeholder="Начните вводить имя или фамилию">
					или
					<a href="#"
						class="generate-multiple-certificates-link internal-page-link"
						data-template-id="@template.Id">
						сгенерируйте много сертификатов
					</a>
				</div>

				foreach (var parameter in Model.TemplateParameters[template.Id])
				{
					<div class="certificate-template__parameter">
						<p>
							@Html.TextBox("parameter-" + parameter, "", new { @class = "form-control", placeholder = "Параметр: " + parameter })
						</p>
					</div>
				}
				<button class="btn btn-success  add-certificate-button">Выдать сертификат</button>
				<button class="btn btn-default  preview-certificate-button"><i class="glyphicon glyphicon-eye-open"></i> Предпросмотр</button>
			}

			<ol class="certificates">
				@foreach (var certificate in Model.Certificates.GetOrDefault(template.Id, new List<Certificate>()))
				{
					<li class="certificate">
                        @UserAvatar.ExtraSmallAvatar(certificate.User)
						
						@Html.RouteLink(certificate.User.VisibleName, "Certificate", new { certificateId = certificate.Id }),
						
						выдал@(certificate.Instructor.Gender.ChooseEnding()) @certificate.Instructor.VisibleName @certificate.Timestamp.ToAgoPrettyString()

						@if (User.HasAccessFor(Model.Course.Id, CourseRole.CourseAdmin) ||
							certificate.InstructorId == User.Identity.GetUserId())
						{
							<a class="remove-certificate-link"
                                  data-certificate-id="@certificate.Id"
                                  data-url="@Url.Action("RemoveCertificate", new { courseId = certificate.Template.CourseId, certificateId = certificate.Id })"
                                  title="Отозвать сертификат">
                                ×
                            </a>
						}
					</li>
				}
			</ol>
		</div>
	}
</div>

<div class="modal fade" id="createOrUpdateCertificateTemplateModal" role="dialog">
	<div class="modal-dialog">
		<div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Новый шаблон</h4>
            </div>
			<div class="modal-body">
				@using (Html.BeginForm("CreateCertificateTemplate", "Admin", FormMethod.Post, new
				{
					data_create_template_url = Url.Action("CreateCertificateTemplate", "Admin"),
					data_edit_template_url = Url.Action("EditCertificateTemplate", "Admin"),
					enctype = "multipart/form-data"
				}))
				{
					@Html.AntiForgeryToken()
					<input type="hidden" name="courseId" value="@Model.Course.Id"/>
					<input type="hidden" name="templateId" value=""/>

					<div class="form-group">
						<input id="name" name="name" type="text" class="form-control" placeholder="Название шаблона" required="required">
					</div>

					<div class="form-group">
						<input id="archive" name="archive" type="file" required="required"/>
						Zip-архив с шаблоном
						<div class="help-block">
							<div class="current-archive-download">
								<a class="current-archive-download-link" href="">Скачать текущий архив</a>.
								<br/>
							</div>
							Архив должен содержать файл index.html. Дополнительно в нём могут быть изображения, стили, шрифты и другие файлы.
							<br/>
							<a href="/Content/certificate-template.zip">Скачайте пример архива со всеми инструкциями</a>.
						</div>
					</div>

					<button class="action-button  btn btn-success">Загрузить</button>
					<button class="remove-template-link  btn btn-danger" data-url="@Url.Action("RemoveCertificateTemplate", "Admin")">Удалить шаблон</button>
				}
			</div>
		</div>
	</div>
</div>


<div class="modal fade" id="multipleCertificatesGenerationModal" role="dialog">
	<div class="modal-dialog">
		<div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Выберите файл с данными</h4>
            </div>
			<div class="modal-body">
				@using (Html.BeginForm("PreviewCertificates", "Admin", FormMethod.Post, new
				{
					enctype = "multipart/form-data"
				}))
				{
					@Html.AntiForgeryToken()
					<input type="hidden" name="courseId" value="@Model.Course.Id"/>
					<input type="hidden" name="templateId" value=""/>

					<div>
						<p>
							Чтобы сгенерировать сразу много сертификатов, подготовьте CSV-файл с данными.
						</p>
						<p>
							Пример такого файла:
							<pre>Фамилия Имя,mark,instructor_notes
Иванов Иван,отлично,
Петров Петр,хорошо,"Учился неплохо, но мог лучше"</pre>
						</p>
						<p>
							В первой строке должны находиться заголовки столбцов.
							Столбец с фамилией и именем студента должен называться «Фамилия Имя».
							Кроме того должны существовать столбцы для каждой из подстановки в шаблоне (в данном случае
							это mark и instructor_notes&nbsp;— на значения из этих столбцов заменятся подстановки
							%mark% и %instructor_notes% в сертификате).
							<br/><em>Остальные столбцы будут проигнорированы.</em>
						</p>
						<p>
							Кодировка файла&nbsp;— <strong>UTF-8</strong>.
						</p>
						<p>
							Чтобы сгенерировать такой файл из гугл-таблицы, выберите в меню <br/>
							<strong>Файл → Скачать как → CSV-файл (текущий лист)</strong>
							/ File → Download as → CSV file (Sheet page)
						</p>
					</div>

					<div class="form-group">
						<input id="certificatesData" name="certificatesData" type="file" required="required"/>
						CSV-файл с данными
					</div>

					<button class="action-button  btn btn-success">Загрузить</button>
				}
			</div>
		</div>
	</div>
</div>