@using Database.Extensions
@using Database.Models
@using uLearn.Web.Extensions
@using uLearn.Web.Views.Shared
@using Ulearn.Common
@using Ulearn.Common.Extensions

@model uLearn.Web.Controllers.GroupsViewModel

@helper GroupSettings(string fieldsPrefix, bool setFirstHeader=false)
{
	<h3 class="@(setFirstHeader ? "first-header" : "")">Код-ревью и проверка тестов</h3>

	<div class="checkbox checkbox-default">
		<input checked="checked" data-default-value="true" id="@(fieldsPrefix)manualChecking" name="manualChecking" type="checkbox" value="true" @(Model.CourseManualCheckingEnabled ? "disabled" : "")>
		<input type="hidden" name="manualChecking" value="false" />
		<label for="@(fieldsPrefix)manualChecking">
			Включить код-ревью и ручную проверку тестов для участников группы <br/>

			@if (Model.CourseManualCheckingEnabled)
			{
				<span>(включено для всего курса)</span>
			}
		</label>
	</div>

	<div class="checkbox checkbox-default @(Model.CourseManualCheckingEnabled ? "hidden" : "")">
        <input checked="checked" data-default-value="true" id="@(fieldsPrefix)manualCheckingForOldSolutions" name="manualCheckingForOldSolutions" type="checkbox" value="true">
        <input type="hidden" name="manualCheckingForOldSolutions" value="false" />
        <label for="@(fieldsPrefix)manualCheckingForOldSolutions">
            Отправить на код-ревью и ручную проверку тестов старые решения участников
            <span class="glyphicon glyphicon-question-sign with-long-tooltip"
                  data-toggle="tooltip"
                  data-placement="right"
                  title="Если эта опция выключена, то при вступлении студента в группу его старые решения не будут отправлены на код-ревью">
            </span>
        </label>
    </div>
    
	<div class="checkbox checkbox-default">
        <input checked="checked" data-default-value="true" id="@(fieldsPrefix)defaultProhibitFutherReview" name="defaultProhibitFutherReview" type="checkbox" value="true">
        <input type="hidden" name="defaultProhibitFutherReview" value="false" />
        <label for="@(fieldsPrefix)defaultProhibitFutherReview">
            По&nbsp;умолчанию запрещать второе прохождение код-ревью
            <span class="glyphicon glyphicon-question-sign with-long-tooltip"
                  data-toggle="tooltip"
                  data-placement="right"
                  title="В каждом код-ревью вы сможете выбирать, разрешить ли студенту второй раз отправить свой код на проверку. Эта опция задаёт лишь значение по умолчанию">
            </span>
        </label>
    </div>

	if (Model.ScoringGroupsCanBeSetInSomeUnit.Count > 0)
	{
		<h3>Баллы</h3>
		<div>
			Преподаватели могут выставлять студентам группы следующие баллы:

			@foreach (var scoringGroup in Model.ScoringGroupsCanBeSetInSomeUnit)
			{
				<div class="checkbox checkbox-default scoring-group-checkbox">
					<input checked="checked" data-default-value="true" id="@(fieldsPrefix)scoring-group__@(scoringGroup.Id)" name="scoring-group__@(scoringGroup.Id)" type="checkbox" value="true">
					<input type="hidden" name="scoring-group__@(scoringGroup.Id)" value="false" />
					<label for="@(fieldsPrefix)scoring-group__@(scoringGroup.Id)">
						@scoringGroup.Name
					</label>
					<div class="scoring-group-description help-block">
						@scoringGroup.Description
					</div>
				</div>
			}
		</div>
	}
}

@helper GroupInviteLinkSettings() {
    <div class="help-block">
        <div class="modal__create_group__step3__invite-link-block" data-enabled="true">
            Отправьте своим студентам ссылку для&nbsp;вступления в&nbsp;группу: <a href="#" class="modal__create-group__step3__invite-link">...</a>
            <a href="#" class="modal__create-group__step3__enable-invite_link" data-group-id="" data-url="@Url.Action("EnableGroupInviteLink", new { groupId = "GROUP_ID", isEnabled = false })">
                Выключить ссылку
            </a>
        </div>
        <div class="modal__create_group__step3__invite-link-block" data-enabled="false">
            <a href="#" class="modal__create-group__step3__enable-invite_link" data-group-id="" data-url="@Url.Action("EnableGroupInviteLink", new { groupId = "GROUP_ID", isEnabled = true})">
                Включить инвайт-ссылку для&nbsp;вступления в&nbsp;группу
            </a>
        </div>
    </div>
}

@functions
{

	List<SelectListItemWithAttributes> GetCopyableCgroupsSelectListItems(string defaultText="Выберите группу")
	{
		var selectGroups = Model.CoursesNames.ToDictionary(kv => kv.Key.ToLower(), kv => new SelectListGroup { Name = kv.Value });
		var instructorsUsersIds = new HashSet<string>(Model.Instructors.Select(i => i.UserId));
		var copyableGroupsSelectListItems = Model.GroupsMayBeCopied.Select(g => new SelectListItemWithAttributes
		{
			Value = g.Id.ToString(),
			Text = g.Name.TruncateWithEllipsis(30) + ": " + g.Members.Count.PluralizeInRussian(new RussianPluralizationOptions
			{
				One = "студент",
				Two = "студента",
				Five = "студентов",
				Gender = Gender.Male,
				hideNumberOne = false,
				smallNumbersAreWords = false,
			}),
			Group = selectGroups.GetOrDefault(g.CourseId.ToLower()),
			HtmlAttributes = new
			{
				data_owner = g.Owner.VisibleName,
				data_need_to_change_owner = !instructorsUsersIds.Contains(g.OwnerId),
				title = g.Name
			}
		}).ToList();
		copyableGroupsSelectListItems.Insert(0, new SelectListItemWithAttributes { Value = "-1", Text = defaultText, });

		return copyableGroupsSelectListItems;
	}

}

@{
	ViewBag.Title = "Группы";
}

<div class="container">

	@Html.AntiForgeryToken()
	<h1>
		Группы
		<small>
			<a href="" class="create-group-link  internal-page-link">создать</a>
			@if (Model.GroupsMayBeCopied.Count > 0)
			{
				<a href="" class="copy-group-link  internal-page-link">скопировать из...</a>
			}
		</small>
	</h1>

	<div class="groups">
		@if (Model.Groups.Count(g => g.IsArchived) > 0)
		{
			<div class="btn-group show-archived-groups-selector">
				<button class="btn btn-default btn-sm active">Активные группы</button>
				<button class="btn btn-default btn-sm">Архив</button>
			</div>
		}
		@if (Model.Groups.Count(g => !g.IsArchived) == 0)
		{
			<div>
				<a href="" class="create-group-link  internal-page-link">Создайте</a> группу, пригласите в неё студентов или добавьте их самостоятельно. Смотрите статистку только по своей группе.
			</div>
		}
		
		
		@foreach (var group in Model.Groups)
		{
			var canModifyGroup = Model.CanModifyGroup[group.Id];
			var enabledScoringGroupsIds = Model.EnabledScoringGroups.GetOrDefault(group.Id, new List<string>());
			<div class="group @(group.IsArchived ? "archived-group" : "") row" data-group-id="@group.Id">
				<div class="col-xs-8 col-md-4 col-lg-2">
					<div class="group__title">@group.Name</div>
					<div class="group__members-count">@group.Members.Count.PluralizeInRussian(RussianPluralizationOptions.Man)</div>
				</div>
				@*
					<div class="group__labels col-xs-4 col-md-4 col-lg-2"
						data-add-label-url="@Url.Action("AddLabelToGroup", "Admin", new { groupId = group.Id, labelId = "%LABEL%" })"
						data-remove-label-url="@Url.Action("RemoveLabelFromGroup", "Admin", new { groupId = group.Id, labelId = "%LABEL%" })">
						<div class="form-group">
							<select class="form-control selectpicker" multiple title="Выберите метки">
								@{
									var groupLabelIds = Model.LabelsOnGroups[group.Id];
									foreach (var label in Model.Labels.Values)
									{
										<option data-content='<span class="group__label label" style="background-color: #@label.ColorHex" data-label-id="@label.Id">@label.Name</span>'
												@(groupLabelIds.Contains(label.Id) ? "selected" : "")>
											@label.Name
										</option>
									}
									<option data-divider="true"></option>
									<option data-label-id="new">Новая метка</option>
								}
							</select>
						</div>
					</div>
				*@
				<div class="col-xs-10 col-md-4 col-lg-4">
					<div>
						@UserAvatar.ExtraSmallAvatar(group.Owner) @group.Owner.VisibleName
					</div>

					@{
						var accesses = Model.GroupAccesses[group.Id];
					}
					@if (accesses.Count > 0)
					{
						<div>
							Преподавател@(accesses.Count == 1 ? "ь" : "и"): @string.Join(", ", accesses.Select(a => a.User.VisibleName))
						</div>
					}
				</div>
				<div class="group__links col-xs-2 col-md-4 col-lg-2 text-right">
					@using (Html.BeginForm("ArchiveGroup", "Admin", FormMethod.Post, new { @class = "ib" }))
					{
						@Html.Hidden("__RequestVerificationToken")
						@Html.Hidden("groupId", group.Id)
						@Html.Hidden("isArchived", !group.IsArchived)
						<button class="archive-group__link visible-on-group-hover btn btn-default btn-xs" title="@(group.IsArchived ? "Вернуть группу из архива" : "Архивировать группу")">@(group.IsArchived ? "Вернуть" : "Архивировать")</button>
					}
					@using (Html.BeginForm("RemoveGroup", "Admin", FormMethod.Post, new { @class = "ib" }))
					{
						@Html.Hidden("__RequestVerificationToken")
						@Html.Hidden("groupId", group.Id)
						<button class="remove-group__link visible-on-group-hover btn btn-link" title="Удалить группу"><span class="glyphicon glyphicon-trash"></span></button>
					}
				</div>
			</div>
		}
	</div>
</div>

@* TODO (andgein): Add form around fields and move url into form's action *@
<div class="modal fade" id="modal__create-group__step1" data-create-group-url="@Url.Action("CreateGroupApi", "Admin")">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal">&times;</button>
				<h4 class="modal-title">Создание группы</h4>
			</div>
			<div class="modal-body">
				@Html.AntiForgeryToken()
				@Html.Hidden("courseId", Model.Course.Id)
				<div class="form-group">
					<h3 class="first-header">Название группы</h3>
					<input id="name" name="name" type="text" class="form-control" placeholder="КН-201 УрФУ 2017" autofocus>
					<div class="field-validation-error modal__create-group__step1__name-error"></div>
					<p class="help-block">
						Студенты увидят название группы, поэтому постарайтесь сделать его понятным. Пример хорошего названия группы: «КН-201 УрФУ 2017», пример плохого: «Моя группа 2».
					</p>
				</div>
			</div>
			<div class="modal-footer">
				<button class="btn btn-success modal__create-group__step1__button">Далее</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="modal__create-group__step2">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal">&times;</button>
				<h4 class="modal-title">Настройки группы</h4>
			</div>
			<div class="modal-body">
				<form action="@Url.Action("UpdateGroupApi", "Admin")" onsubmit="return false;">
					@Html.AntiForgeryToken()
					@Html.Hidden("courseId", Model.Course.Id)
					@Html.Hidden("groupId")
					
					@GroupSettings("modal__create-group__step2__", setFirstHeader: true)
					
					<div class="field-validation-error modal__create-group__step2__error"></div>
				</form>
			</div>
			<div class="modal-footer">
				<button class="btn btn-success modal__create-group__step2__button">Далее</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="modal__create-group__step3" data-group-info-url="@Url.Action("GroupInfo", "Admin", new { groupId = "GROUP_ID" })">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal">&times;</button>
				<h4 class="modal-title">Участники группы</h4>
			</div>
			<div class="modal-body">
				<h3>Преподаватели</h3>
				<div class="help-block">
					Преподаватели могут видеть список участников группы, проводить код-ревью и проверку тестов, выставлять баллы и смотреть ведомость.
				</div>
					
				<div class="modal__group__accesses">
					<div class="group__accesses">
							
					</div>
					<form action="@Url.Action("GrantAccessToGroup", "Admin")" onsubmit="return false;">
						@Html.AntiForgeryToken()
						@Html.Hidden("courseId", Model.Course.Id)
						@Html.Hidden("groupId")
						@Html.Hidden("userId")
						<input type="text" class="modal__group__add-access__input form-control" name="usernameOrEmail"
								placeholder="Начните вводить имя, фамилию или логин преподавателя"
								data-url="@Url.Action("FindUsers", "Admin",  new { courseId = Model.Course.Id, withGroups = false })"/>
						<div class="field-validation-error modal__group__name-error"></div>
					</form>
				</div>

				<h3>Студенты</h3>
				@GroupInviteLinkSettings()
				
				@if (User.IsSystemAdministrator())
				{
					<ol class="modal__edit-group__members">
						
					</ol>

					<div class="help-block">
						Администраторы ulearn могут добавлять студентов в&nbsp;группу самостоятельно:
					</div>
					<input type="text"
							class="add-user-to-group__input form-control"
							data-group-id=""
							data-url="@Url.Action("FindUsers", "Admin", new { courseId = Model.Course.Id, withGroups = false, onlyInstructors = false })"
							placeholder="Начните вводить имя, фамилию или логин">	
					<div class="add-user-to-group__error field-validation-error"></div>
				}

				<div class="field-validation-error modal__create-group__step3__error"></div>
			</div>
			<div class="modal-footer">
				<button class="btn btn-success modal__create-group__step3__button" data-dismiss="modal">Закрыть</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade "id="modal__edit-group" data-group-info-url="@Url.Action("GroupInfo", "Admin", new { groupId = "GROUP_ID" })">
	<div class="modal-dialog medium">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal">&times;</button>
				<div class="modal-title"><span class="modal__edit-group__group-name"></span></div>
				<div class="pull-right">
					<ul class="modal-header__tabs">
						<li class="active"><a href="#" data-target="#modal__edit-group__members">Участники</a></li>
						<li><a href="#" data-target="#modal__edit-group__settings">Настройки</a></li>
					</ul>
				</div>
			</div>
			<div class="modal-body">
				<div role="tabpanel" class="tab-pane fade in active" id="modal__edit-group__members">
					<h3 class="first-header">Преподаватели</h3>
					<div class="help-block">
						Преподаватели могут видеть список участников группы, проводить код-ревью и проверку тестов, выставлять баллы и смотреть ведомость.
					</div>
					<div class="modal__group__accesses">
						<div class="group__accesses">

						</div>
						<form action="@Url.Action("GrantAccessToGroup", "Admin")" onsubmit="return false;">
							@Html.AntiForgeryToken()
							@Html.Hidden("courseId", Model.Course.Id)
							@Html.Hidden("groupId")
							@Html.Hidden("userId")
							<input type="text" class="modal__group__add-access__input form-control" name="usernameOrEmail"
									placeholder="Начните вводить имя, фамилию или логин преподавателя"
									data-url="@Url.Action("FindUsers", "Admin",  new { courseId = Model.Course.Id, withGroups = false })"/>
							<div class="field-validation-error modal__group__name-error"></div>
						</form>
					</div>

					<h3>Студенты</h3>
                    @GroupInviteLinkSettings()
                    
                    <div class="modal__edit-group__mass-operations">
                        
                        <div class="checkbox checkbox-default checkbox-xsmall">
                            <input type="checkbox" name="group__member__remove-all" id="group__member__remove-all" class="group__member__remove-all-checkbox"/>
                            <label class="text-muted" for="group__member__remove-all" data-text="Выбрать всех">Выбрать всех</label>
                        </div>
                        
                        <button class="pull-right modal__edit-group__mass-remove-button btn btn-danger btn-xs" data-url="@Url.Action("RemoveUsersFromGroup")">Удалить из группы</button>
                        <nobr>
                            <div class="input-group input-group-xs">
                                @Html.DropDownListWithItemAttributes("copyToGroupId", GetCopyableCgroupsSelectListItems("Скопировать студентов в группу"), new { @class = "form-control" })
                            </div>
                            <button class="modal__edit-group__mass-copy-button btn btn-primary btn-xs" data-url="@Url.Action("CopyUsersFromOneGroupToAnother")">Копировать</button>
                            <span class="modal__edit-group__mass-copy-status"></span>
                        </nobr>
                    </div>
                    <ol class="modal__edit-group__members">
						
					</ol>
					
					@if (User.IsSystemAdministrator())
					{
						<div class="help-block">
							Администраторы ulearn могут добавлять студентов в&nbsp;группу самостоятельно:
						</div>
						<input type="text"
								class="add-user-to-group__input form-control"
								data-group-id=""
								data-url="@Url.Action("FindUsers", "Admin", new { courseId = Model.Course.Id, withGroups = false, onlyInstructors = false })"
								placeholder="Начните вводить имя, фамилию или логин">	
						<div class="add-user-to-group__error field-validation-error"></div>
					}
				</div>
				<div role="tabpanel" class="tab-pane fade" id="modal__edit-group__settings">
					<form action="@Url.Action("UpdateGroupApi", "Admin")" onsubmit="return false;">
						@Html.AntiForgeryToken()
						@Html.Hidden("courseId", Model.Course.Id)
						@Html.Hidden("groupId")
						
						<h3 class="first-header">Название</h3>

						@Html.TextBox("name", "", new { @class="form-control", placeholder="Название группы" })

						@GroupSettings("modal__edit-group__")

						<div class="field-validation-error modal__edit-group__error"></div>
					</form>
				</div>
			</div>
			<div class="modal-footer">
				<button class="btn btn-success modal__edit-group__button">Сохранить</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="copyGroupModal" role="dialog">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal">&times;</button>				
				<h4 class="modal-title">Скопировать группу</h4>
			</div>
			@using (Html.BeginForm("CopyGroup", "Admin", FormMethod.Post))
			{
				<div class="modal-body">
					@Html.Hidden("courseId", Model.Course.Id)
					<h3 class="first-header">Группа, которую надо скопировать</h3>
					<div>
						<p class="help-block">
							Новая группа будет создана для&nbsp;курса <b>«@Model.Course.Title»</b>.
							Скопируются все настройки группы (в&nbsp;том числе владелец), в&nbsp;неё автоматически добавятся участники из&nbsp;копируемой группы.
							Преподаватели тоже будут добавлены в группу, если у&nbsp;них есть права на&nbsp;курс «@Model.Course.Title».
						</p>
					</div>
					<div class="form-group input-group">
						@Html.DropDownListWithItemAttributes("groupId", GetCopyableCgroupsSelectListItems(), new { @class = "form-control" })
					</div>
					<div class="form-group copy-group__change-owner-block">
						<p class="help-block">
							Владелец этой группы <span class="owner-name"></span> не&nbsp;является преподавателем курса «@Model.Course.Title».
							Вы&nbsp;можете @(User.HasAccessFor(Model.Course.Id, CourseRole.CourseAdmin) ? "добавить его в список преподавателей или" : "")
							сделать себя владельцем скопированной группы.
						</p>
						<div class="checkbox checkbox-default">
							@Html.CheckBox("changeOwner")
							<label for="changeOwner">
								Сделать меня владельцем группы
							</label>
						</div>
					</div>
				</div>
				<div class="modal-footer">
					<button class="btn btn-success copy-group-button">Скопировать группу</button>
				</div>
			}
		</div>
	</div>
</div>

