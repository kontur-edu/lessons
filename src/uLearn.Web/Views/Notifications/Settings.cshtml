@using Database.Extensions
@using Database.Models
@using Ulearn.Common.Extensions
@using Ulearn.Core.Extensions

@model uLearn.Web.Controllers.NotificationSettingsViewModel

@helper ShowNotificationsTransportSettings(NotificationTransport transport, string notificationsDestination)
{
	if (transport != null)
	{
		<div class="pull-right">
			@if (!transport.IsEnabled)
			{
				<nobr>
					<a href="@Url.Action("EnableNotificationTransport", "Notifications", new
					         {
						         transportId = transport.Id,
						         enable = true,
						         timestamp = Model.EnableLinkTimestamp,
						         signature = Model.GetEnableLinkSignature(transport.Id),
						         next = Url.Action("Manage", "Account")
					         })" class="btn btn-xs btn-success">
						включить уведомления
					</a>

					<span class="fa fa-question-circle with-long-tooltip" data-toggle="tooltip" data-placement="top" title="Вы сможете выбрать, какие новости получать @notificationsDestination"></span>
				</nobr>
			}
			else
			{
				<a href="#" class="notifications__transport-settings__link internal-page-link @( Model.SelectedTransportId == transport.Id ? "auto-open" : "")"
					data-transport-id="@transport.Id"
					data-transport-enable-signature="@Model.GetEnableLinkSignature(transport.Id)"
					data-modal-title="Настройка уведомлений @notificationsDestination">
					Настроить уведомления
				</a>
			}
		</div>
	}
}

@helper CourseNotificationsSettings()
{
	<h4 class="notifications__transport-settings__course-title">Курс «<span class="course-title"></span>»</h4>
	@Html.Hidden("transportId")
	@Html.Hidden("courseId")

	var lastMinCourseRole = CourseRole.Student;
	foreach (var notificationType in Model.AllNotificationTypes)
	{
		<div class="checkbox checkbox-default">
			@{
				var checkBoxId = "notification-settings__" + (int)notificationType;
				if (lastMinCourseRole != notificationType.GetMinCourseRole())
				{
					lastMinCourseRole = notificationType.GetMinCourseRole();
					var courseRoleStr = "";
					switch (lastMinCourseRole)
					{
						case CourseRole.Tester:
							courseRoleStr = "Для тестировщиков";
							break;
						case CourseRole.Instructor:
							courseRoleStr = "Для преподавателей";
							break;
						case CourseRole.CourseAdmin:
							courseRoleStr = "Для владельцев курса";
							break;
					}
					if (notificationType.IsForSysAdminsOnly())
					{
						courseRoleStr = "Для администраторов";
					}
					<div class="course-role text-muted">
						@( courseRoleStr):
					</div>
				}
			}

			@Html.CheckBox(checkBoxId, false, new { data_default = notificationType.IsEnabledByDefault().ToString().ToLower(), data_notification_type = (int)notificationType })
			<label for="@checkBoxId">
				@notificationType.GetGroupName() <span class="status"></span>
			</label>
		</div>
	}
}

@if (Model.User.EmailConfirmed)
{
	<div class="form-group profile__form-group-info">
		<b>Эл. почта:</b>
		<a href="#" class="profile__change-email__link internal-page-link">
			@if (string.IsNullOrEmpty(Model.User.Email))
			{
				<i>не указана</i>
			}
			else
			{
				@Model.User.Email.TruncateWithEllipsis(25)
			}</a>&nbsp;<span class="glyphicon glyphicon-pencil glyphicon-sm"></span>
		@ShowNotificationsTransportSettings(Model.MailTransport, "на почту")
	</div>
}

@if (Model.User.TelegramChatId.HasValue)
{
	<div class="form-group profile__form-group-info">
		<b>Телеграм:</b> @Model.User.TelegramChatTitle
		@ShowNotificationsTransportSettings(Model.TelegramTransport, "в телеграм")
	</div>
}
else
{
	<div class="form-group profile__form-group-info help-text text-muted">
		Чтобы получать уведомления в&nbsp;телеграм, напишите <a href="https://t.me/@Model.TelegramBotName">нашему боту</a>.
	</div>
}

<div id="notifications__transport-settings__modal" class="modal" data-save-url="@Url.Action("SaveSettings", "Notifications")">
	<div class="modal-dialog wide">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal">&times;</button>
				<h4 class="modal-title ib"></h4>
				<div class="pull-right">
					<a href="@Url.Action("EnableNotificationTransport", "Notifications", new
					         {
						         transportId = "TRANSPORT-ID",
						         enable = false,
						         timestamp = Model.EnableLinkTimestamp,
						         signature = "TRANSPORT-ENABLE-SIGNATURE",
						         next = Url.Action("Manage", "Account")
					         })" class="notifications__disable-transport__button btn btn-xs btn-danger">
						Выключить все уведомления
					</a>
				</div>
			</div>
			<div class="modal-body">
				<div class="row">
					<div class="notifications__transport-settings__course__panel col-xs-12 col-md-5">
						<h4>Выберите курс</h4>

						@foreach (var courseId in Model.CourseTitles.Keys.OrderBy(courseId => Model.CourseTitles[courseId]))
						{
							var courseTitle = Model.CourseTitles[courseId];
							<div>
								<a href="#" class="notifications__transport-settings__course__link" data-course-id="@courseId" data-course-title="@courseTitle">@courseTitle</a>
							</div>
						}

						@if (Model.CourseTitles.Count <= 0)
						{
							<div class="notifications__transport-settings__courses-description">
								Вы пока не&nbsp;учитесь ни&nbsp;в&nbsp;одном курсе.
								Чтобы начать учиться, выберите интересный вам курс <a href="@Url.Action("Index", "Home")">на&nbsp;главной странице</a>.
							</div>
						}
						else
						{
							<div class="notifications__transport-settings__courses-description">
								Здесь показываются только те курсы, в&nbsp;которых вы учились@(User.HasAccess(CourseRole.Instructor) ? " или преподавали" : "")
							</div>
						}
					</div>
					<div class="notifications__transport-settings__panel col-xs-12 col-md-7">
						@CourseNotificationsSettings()
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<script>
	window.notificationTypesByCourse = @Html.Raw(
		                                Model.NotificationTypesByCourse.ToDictionary(kvp => kvp.Key, kvp => kvp.Value.Select(t => (int)t)).JsonSerialize()
		                                );

	window.notificationTransportsSettings = @Html.Raw(Model.NotificationTransportsSettings.Select(
		                                     kvp => new
		                                     {
			                                     courseId = kvp.Key.Item1,
			                                     transportId = kvp.Key.Item2,
			                                     notificationType = kvp.Key.Item3,
			                                     isEnabled = kvp.Value,
		                                     }
		                                     ).JsonSerialize());
</script>