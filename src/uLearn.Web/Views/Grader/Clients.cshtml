@model uLearn.Web.Controllers.GraderClientsViewModel

@{
	ViewBag.Title = "Клиенты грейдера";
}

<div class="container">
	<h2>Клиенты грейдера</h2>

	@if (Model.Clients.Any())
	{
		<p class="text-muted">Клиенты нужны, чтобы внешние платформы могли проверять решения задач из&nbsp;курса через API грейдера на&nbsp;@(Request.Url.Host).</p>
	}
	else
	{
		<p class="text-muted">Нет клиентов. Создайте первого, и внешние платформы смогут проверять решения задач из&nbsp;курса через API грейдера на&nbsp;@(Request.Url.Host).</p>
	}

	@foreach (var client in Model.Clients)
	{
		<div class="grader-client">
			<h3>@client.Name</h3>
			<div>
				ClientId: <b>@client.Id</b>
			</div>
			<div class="text-muted">
				Сообщите этот ключ разработчикам внешней платформы. Его нужно передавать в&nbsp;каждый запрос к&nbsp;API грейдера.
				<a href="#" data-toggle="modal" data-target="#grader-client__api-example__@client.Id" class="internal-page-link">Примеры запросов к&nbsp;API</a>.
			</div>
			<div>
				@Html.ActionLink("Смотреть решения →", "Submissions", "Grader", new { courseId = Model.CourseId, clientId = client.Id }, new { })
			</div>
		</div>

		<div class="modal fade" id="grader-client__api-example__@client.Id" tabindex="-1" role="dialog" aria-hidden="true">
			<div class="modal-dialog" style="width: 75%">
				<div class="modal-content">
					<div class="modal-header">
						<button type="button" class="close" data-dismiss="modal" aria-label="Close">
							<span aria-hidden="true">&times;</span>
						</button>
						<h4 class="modal-title">Примеры запросов к&nbsp;API грейдера</h4>
					</div>
					<div class="modal-body">
						<h3>Отправка решения</h3>
						<p>POST-запрос на&nbsp;<code>@Url.Action("Submit", "Grader", null, Request.GetRealScheme())</code> с&nbsp;заголовком <code>Content-Type: application/json</code></p>
						<pre>{
    "client_id": "@client.Id",
    "course_id": "@Model.CourseId",
    "slide_id": идентификатор слайда, например, "90bcb61e-57f0-4baa-8bc9-10c9cfd27f58",
    "solution": решение, закодированное в base64,
    "user_id": строка, идентифицирующая пользователя внешней платформы
}</pre>
						<h4>Примеры ответа</h4>
						<pre>{
    "status": "ok",
    "submission_id": 10
}</pre>
						<pre>{
    "status": "error",
    "message": "Invalid client id"
}</pre>
						<h3>Получение статуса проверки</h3>
						<p>
							GET-запрос на&nbsp;<code>@Url.Action("Submission", "Grader", new { clientId = client.Id, submissionId = "10" }, Request.GetRealScheme())</code>
						</p>
						<h4>Примеры ответа</h4>
						<pre>{
    "status": "IN_PROCESS",
    "score": 0.0,
    "compilation_log": null,
    "execution_log": null
}</pre>
						<pre>{
    "status": "READY",
    "score": 0.5, // Число от 0.0 до 1.0
    "compilation_log": "Информация о компиляции, в том числе ошибки компиляции", 
    "execution_log": "Вывод программы"
}</pre>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-primary" data-dismiss="modal">Закрыть</button>
					</div>
				</div>
			</div>
		</div>
	}

	@using (Html.BeginForm("AddClient", "Grader", new { courseId = Model.CourseId }, FormMethod.Post, new { @class = "max-width-400" }))
	{
		@Html.AntiForgeryToken()
		<h3>Добавить клиента</h3>
		<div class="input-group">
			<input type="text" class="form-control" name="name" placeholder="Имя клиента, например «Stepik.org»"/>
			<span class="input-group-btn">
				<button role="button" class="btn btn-primary">Добавить</button>
			</span>
		</div>
	}
</div>