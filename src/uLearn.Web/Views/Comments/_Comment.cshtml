@model CommentViewModel

@helper ReplyForm(Comment comment, bool isFormHidden)
{
	<div class="reply-form is-reply media @(isFormHidden ? "collapse" : "")">
		@using (Html.BeginForm("AddComment", "Comments", FormMethod.Post))
		{
			@Html.AntiForgeryToken()
			@Html.Hidden("courseId", comment.CourseId)
			@Html.Hidden("slideId", comment.SlideId)
			@Html.Hidden("parentCommentId", comment.Id)
			<div class="pull-left">
				<img src="//placehold.it/24x24" />
			</div>
			<div class="media-body">
				@Html.TextBox("commentText", "", new { placeholder = "Ответить.." })
			</div>
		}
	</div>
}
@if (Model.IsCommentVisibleForUser)
{
	<div class="comment
		 @(Model.Comment.IsTopLevel() ? "" : "is-reply")
		 @(Model.Comment.IsApproved ? "" : "not-approved")
		 @(Model.Comment.IsPinnedToTop ? "is-pinned" : "")
		 @(Model.Comment.IsCorrectAnswer ? "is-correct-answer" : "")
		 media">
		<a class="pull-left" href="#">
			<img class="comment__author-avatar media-object" src="//placehold.it/54x54" alt="">
		</a>
		<div class="media-body">
			<div class="comment__header media-heading">
				<div class="comment__author-name">
					@if (Model.Comment.Author.FirstName + Model.Comment.Author.LastName == "")
					{
						<text>Пользователь</text>
					}
					else
					{
						@Model.Comment.Author.FirstName
						@Model.Comment.Author.LastName
					}
				</div>
				@if (Model.CanModerateComment || !Model.Comment.IsApproved)
				{
					<div class="comment__not-approved @(Model.CanModerateComment ? "label-switcher" : "") label label-as-badge label-default"
					     data-url="@Url.Action("ApproveComment", new { commentId = Model.Comment.Id })">
						@if (Model.CanModerateComment)
						{
							<span class="hide-on-parent-hover">не опубликовано</span>
							<span class="show-on-parent-hover">опубликовать <span class="glyphicon glyphicon-ok"></span></span>
							@Html.AntiForgeryToken()
						}
						else
						{
							<text>не опубликовано</text>
						}
					</div>
				}

				@if (Model.Comment.IsTopLevel())
				{
					if (Model.CanModerateComment || Model.Comment.IsPinnedToTop)
					{
						<div class="comment__pinned @(Model.CanModerateComment ? "label-switcher" : "") label label-as-badge label-success show-on-comment-hover"
						     data-url="@Url.Action("PinComment", new { commentId = Model.Comment.Id })">

							@if (Model.CanModerateComment)
							{
								<span class="hide-on-parent-hover show__if_pinned">закреплено</span>
								<span class="show-on-parent-hover__if-pinned">открепить <span class="glyphicon glyphicon-arrow-down"></span></span>
								<span class="show-on-comment-hover__if-not-pinned">закрепить <span class="glyphicon glyphicon-arrow-up"></span></span>
							}
							else
							{
								<text>закреплено</text>
							}
							@Html.AntiForgeryToken()
						</div>
					}
				}

				@if (!Model.Comment.IsTopLevel())
				{
					if (Model.CanModerateComment || Model.Comment.IsCorrectAnswer)
					{
						<div class="comment__correct-answer @(Model.CanModerateComment ? "label-switcher" : "") label label-as-badge label-primary show-on-comment-hover"
						     data-url="@Url.Action("MarkAsCorrectAnswer", new { commentId = Model.Comment.Id })">
							правильный ответ
							@if (Model.CanModerateComment)
							{
								<span class="glyphicon glyphicon-remove"></span>
							}
							@Html.AntiForgeryToken()
						</div>
					}
				}
			</div>

			<div class="comment__text">@Html.Raw(Html.EncodeMultiLineText(Model.Comment.Text))</div>

			<div class="comment__footer">
				@{
					var likesCount = Model.LikesCount;
				}
				<div class="comment__likes-count @(Model.IsLikedByUser ? "is-liked" : "")"
				     data-url="@Url.Action("LikeComment", new { commentId = Model.Comment.Id })">
					@Html.AntiForgeryToken()
					<span class="glyphicon glyphicon-heart"></span>
					<span class="comment__likes-count__counter">
					@if (likesCount > 0)
					{
						@likesCount
					}
				</span>
				</div>
				<div class="comment__publish-time" title="@Model.Comment.PublishTime.ToPrettyString()">
					@Model.Comment.PublishTime.ToAgoPrettyString()
				</div>
				@if (Model.Comment.IsTopLevel() && Model.CanReply && !Model.Replies.Any())
				{
					<div class="comment__inline-reply show-on-comment-hover">
						<a href="">ответить</a>
					</div>
				}

				@if (Model.CanEditAndDeleteComment)
				{
					<div class="comment__edit-link show-on-comment-hover"
						 data-url="@Url.Action("EditCommentText", new { commentId = Model.Comment.Id })">
						<a href="">редактировать<span class="glyphicon glyphicon-pencil"></span></a>
						@Html.AntiForgeryToken()
					</div>
				}

				@if (Model.CanModerateComment)
				{
					<div class="comment__hide-link show-on-comment-hover" data-url="@Url.Action("ApproveComment", new { commentId = Model.Comment.Id })">
						<a href="">скрыть<span class="glyphicon glyphicon-eye-close"></span></a>
						@Html.AntiForgeryToken()
					</div>
				}
				
				@if (Model.CanEditAndDeleteComment)
				{
					<div class="comment__delete-link show-on-comment-hover"
						 data-url="@Url.Action("DeleteComment", new { commentId = Model.Comment.Id })"
						 data-restore-url="@Url.Action("RestoreComment", new { commentId = Model.Comment.Id })">
						<a href="" title="удалить комментарий">удалить<span class="glyphicon glyphicon-remove"></span></a>
						@Html.AntiForgeryToken()
					</div>
				}

			</div>
		</div>
	</div>

	foreach (var reply in Model.Replies)
	{
		@Html.Partial("_Comment", reply);
	}

	if (Model.Comment.IsTopLevel() && Model.CanReply)
	{
		@ReplyForm(Model.Comment,  ! Model.Replies.Any())
	}

}