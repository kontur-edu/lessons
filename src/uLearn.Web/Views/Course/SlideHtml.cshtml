@* Generator: MvcHelper GeneratePrettyNames: true DisableLinePragmas: true *@
@using Database.Models
@using log4net
@using uLearn
@using uLearn.Model.Blocks
@using uLearn.Quizes
@using uLearn.Web.Controllers
@using uLearn.Web.Extensions
@* ReSharper disable RedundantUsingDirective *@
@using uLearn.Web.Models
@using Ulearn.Common.Extensions
@* ReSharper restore RedundantUsingDirective *@


@helper Slide(BlockRenderContext context, HtmlHelper Html, int currentScore = 0)
{
	<div class="slide">
		<h1>
			@context.Slide.Title
			<span class="score">@Score(currentScore, context.Slide.MaxScore)</span>
		</h1>
		@Blocks(context, Html)
	</div>
}

@helper Blocks(BlockRenderContext context, HtmlHelper Html)
{
	var countHiddenBlocks = context.Slide.GetBlocksRangesWithSameVisibility().Count(b => b[0].Hide);
	var firstHiddenBlock = true;
	foreach (var blockRange in context.Slide.GetBlocksRangesWithSameVisibility())
	{
		if (!blockRange[0].Hide)
		{
			foreach (var block in blockRange)
			{
				@Block((dynamic)block, context, Html)
			}
		}
		else if (context.RevealHidden)
		{
			<div class="revealed">
                @if (firstHiddenBlock)
                {
	                firstHiddenBlock = false;
	                <div class="revealed__description">Студенты не&nbsp;видят @(countHiddenBlocks > 1 ? "синие блоки" : "этот блок")</div>
                }
                @foreach (var block in blockRange)
                {
	                @Block((dynamic)block, context, Html)
                }
            </div>
		}
	}
}

@helper Block(AbstractQuestionBlock block, BlockRenderContext context, HtmlHelper Html)
{
	var mark = "";
	var style = "";
	var blockScore = -1;
	QuizBlockData model = context.GetBlockData(block);
	if (model.QuizState != QuizState.NotPassed && model.QuizState != QuizState.WaitForCheck && model.QuizState != QuizState.IsChecking)
	{
		if (model.QuizModel != null && model.QuizModel.ResultsForQuizes != null)
		{
			var res = model.QuizModel.ResultsForQuizes.TryGetValue(block.Id, out blockScore) && blockScore == block.MaxScore;
			mark = "glyphicon " + (res ? "glyphicon-ok" : "glyphicon-remove");
			style = "color: " + (res ? "green" : "red");
		}
	}
	<h4>
		<i class="@mark" style="@style"></i>
		<span class="quiz-block__text">
			@block.QuestionIndex. @block.Text.RenderTex().ToLegacyHtmlString()
		</span>
		<span class="quiz-block__score">
			@if (blockScore >= 0)
			{
				<nobr>@blockScore из @block.MaxScore балл@( block.MaxScore == 1 ? "а" : "ов")</nobr>
			}
			else
			{
				<nobr>@block.MaxScore.PluralizeInRussian(RussianPluralizationOptions.Score)</nobr>
			}
		</span>
	</h4>

	@QuizBlock((dynamic)block, context)
	if (context.ManualChecking != null)
	{
		<h4>Оцените от 0 до @block.MaxScore</h4>
		<div>
			<input type="number" class="form-control" min="0" max="@block.MaxScore" name="quiz__score__@( block.Id)"/>
		</div>
	}

	<div class="quiz-block-delimiter"></div>
}


@helper Score(int currentScore, int maxScore)
{ @( maxScore == 0 ? "" : string.Format("{0}/{1}", currentScore, maxScore)) }

@helper Block(MdBlock block, BlockRenderContext context, HtmlHelper Html)
{
	@MvcHtmlString.Create(block.RenderMd(context.Course.Id, context.Slide.Id, context.BaseUrl))
}

@helper Block(CodeBlock block, BlockRenderContext context, HtmlHelper Html)
{
	<textarea class="code code-sample" data-lang="@block.LangId" data-ver="@block.LangVer">@block.Code</textarea>
}

@helper Block(TexBlock block, BlockRenderContext context, HtmlHelper Html)
{
	foreach (var texLine in block.TexLines)
	{
		<div class="tex">\displaystyle @texLine.Trim()</div>
	}
}

@helper Block(YoutubeBlock block, BlockRenderContext context, HtmlHelper Html)
{
	<div class="video-container">
		<div class="youtube-video" data-width="864" data-height="480" data-video-id="@block.VideoId" data-autoplay="@context.Autoplay.ToString().ToLower()"></div>
	</div>
	<div>
		<a href="javascript://" class="popover-trigger pull-right"
			title="Как ускорить видео?"
			data-content="Выберите скорость в иконке с шестеренкой или используйте горячие клавиши Shift+> и Shift+<"
			data-placement="bottom">
			<span class="glyphicon glyphicon-question-sign"></span>
			Ускорить видео?
		</a>
	</div>
}

@helper Block(ImageGaleryBlock block, BlockRenderContext context, HtmlHelper Html)
{
	<div class="flexslider">
		<ul class="slides">
			@foreach (var imageUrl in block.ImageUrls)
			{
				<li>
					<img src="@string.Format("{0}/{1}", context.BaseUrl, imageUrl)" alt="@imageUrl"/>
				</li>
			}
		</ul>
	</div>
}

@helper CodeTextArea(string initialCode, string langId, string runSolutionUrl)
{
	<textarea class="code code-exercise" data-lang="@langId">@initialCode</textarea>
	<div class="solution-control btn-group ctrl-group">
		<button type="button" class="run-solution-button btn btn-primary no-rounds" data-url="@runSolutionUrl">
			Run
		</button>
	</div>

	@RunErrors()
}

@helper Block(ExerciseBlock block, BlockRenderContext context, HtmlHelper Html)
{
	<div class="exercise">
		@{
			ExerciseBlockData data = context.GetBlockData(block) ?? new ExerciseBlockData(context.Course.Id, context.Slide as ExerciseSlide) { IsGuest = context.IsGuest, IsLti = context.IsLti };
			var manualCheckingId = context.ManualChecking != null ? (int?)context.ManualChecking.Id : null;

			if (Html != null)
			{
				@Html.Action("Submission", "Exercise", new { courseId = context.Course.Id, slideId = context.Slide.Id, submissionId = context.VersionId, manualCheckingId = manualCheckingId, isLti = data.IsLti, instructorView = manualCheckingId != null })
			}
			else
			{
				<div class="exercise__submission">
					<textarea class="code code-exercise hidden" data-lang="@block.LangId">@( block.ExerciseInitialCode.EnsureEnoughLines(4))</textarea>
					<div class="loading-spinner">
						<img src="/Content/loading.gif"/>
					</div>
					@ExerciseControls(new ExerciseControlsModel(context.Course.Id, (ExerciseSlide)context.Slide)
					{
						IsLti = context.IsLti,
						IsCodeEditableAndSendable = true,
						DebugView = data.DebugView,
						RunSolutionUrl = data.RunSolutionUrl,
					})

					@RunErrors()
				</div>
			}
		}

		@if (data.DebugView)
		{
			<div>
				<h3>Подсказки</h3>
				<ol>
					@foreach (var hint in data.Block.HintsMd)
					{
						<li>
							@MvcHtmlString.Create(hint.RenderMd(context.BaseUrl))
						</li>
					}
				</ol>
				<h3>Комментарий после решения</h3>
				<p>@data.Block.CommentAfterExerciseIsSolved</p>
			</div>
		}

		@if (context.ManualChecking != null)
		{
			var checking = (ManualExerciseChecking)context.ManualChecking;

			@Html.Partial(
				"~/Views/Exercise/_ExerciseScoreForm.cshtml",
				new ExerciseScoreFormModel(
					context.Course.Id,
					(ExerciseSlide)context.Slide,
					checking,
					context.GroupsIds,
					(context.VersionId == null || checking.Submission.Id == context.VersionId) && !context.IsManualCheckingReadonly,
					context.DefaultProhibitFutherReview
				))
		}
	</div>
}

@helper QuizBlock(ChoiceBlock block, BlockRenderContext context)
{
	var items = block.ShuffledItems();
	var isMultiply = block.Multiple;
	var typeInp = isMultiply ? "checkbox" : "radio";
	QuizBlockData model = context.GetBlockData(block) ?? new QuizBlockData(new QuizModel(), 1, QuizState.NotPassed);
	<div class="quiz-block-mark @typeInp @typeInp-default" id='@( block.Id + "_quizBlock")'>
		@for (var itemIndex = 0; itemIndex < items.Length; itemIndex++)
		{
			var item = items[itemIndex];
			var id = isMultiply ? itemIndex + "noMult" : model.BlockIndex.ToString();
			var itemChecked = model.QuizState != QuizState.NotPassed && model.QuizModel.AnswersToQuizes[block.Id].Select(x => x.ItemId).Contains(item.Id);
			var ans = itemChecked ? "checked" : "";
			var itemClass = "";
			var title = "";
			var readonlyAttr = context.CanUserFillQuiz ? "" : "disabled";
			if (model.QuizState == QuizState.Total)
			{
				itemClass = item.IsCorrect ? "right-quiz" : itemChecked ? "wrong-quiz" : "";
				title = (item.IsCorrect ? "Правильный" : "Неправильный") + " вариант";
			}
			<div class="quiz">
				<input @ans autocomplete="off" id='@( block.Id + "quizBlock" + item.Id)' name=@( "group" + id) type="@typeInp" @GetGuestDisable(context.IsGuest) @readonlyAttr>
				<label class="@itemClass" title="@title" for="@( block.Id + "quizBlock" + item.Id)" @GetGuestOnclick(context.IsGuest)>
					@item.Description.Trim().RenderTex().ToLegacyHtmlString()
					@if (model.QuizState == QuizState.Total && model.ShowCorrectAnswer && item.IsCorrect)
					{
						<i class="glyphicon glyphicon-ok" style="color: green" title="@title"></i>
					}
				</label>
				@if (model.QuizState == QuizState.Total && !string.IsNullOrEmpty(item.Explanation))
				{
					<p class="quiz__explanation">@item.Explanation</p>
				}
			</div>
		}
	</div>
}

@helper QuizBlock(FillInBlock block, BlockRenderContext context)
{
	var value = "";
	var quizRes = "";
	QuizBlockData model = context.GetBlockData(block) ?? new QuizBlockData(new QuizModel(), 1, QuizState.NotPassed);
	if (model.QuizState != QuizState.NotPassed && model.QuizModel.AnswersToQuizes[block.Id].FirstOrDefault() != null)
	{
		var answers = model.QuizModel.AnswersToQuizes[block.Id];
		var userAnswer = answers.FirstOrDefault();
		value = userAnswer.Text;
		quizRes = model.QuizState == QuizState.Total
			? (userAnswer.IsRightAnswer ? "right-quiz" : "wrong-quiz") : "";
	}
	var sample = block.Sample;
	var readonlyAttr = context.CanUserFillQuiz ? "" : "readonly";
	<div class="quiz quiz-block-input">
		<label @GetGuestOnclick(context.IsGuest)>
			@if (block.Multiline)
			{
				<textarea class="form-control @quizRes" id='@( block.Id + "quizBlock")' maxlength="@QuizController.MaxFillinblockSize" @GetGuestDisable(context.IsGuest) @readonlyAttr cols="70" rows="5">@value</textarea>
			}
			else
			{
				<input
					autocomplete="off"
					class="form-control @quizRes"
					value="@value" id='@( block.Id + "quizBlock")'
					maxlength="@QuizController.MaxFillinblockSize"
					size="68"
					@GetGuestDisable(context.IsGuest)
					@readonlyAttr/>
			}
		</label>
	</div>
	if (model.QuizState == QuizState.Total)
	{
		if (model.ShowCorrectAnswer)
		{
			<div>Правильный ответ: @sample</div>
		}
		if (!string.IsNullOrEmpty(block.Explanation))
		{
			<div class="text-muted">@block.Explanation</div>
		}
	}
}

@helper QuizBlock(IsTrueBlock block, BlockRenderContext context)
{
	var tchecked = "";
	var fchecked = "";
	var trueItemClass = "";
	var falseItemClass = "";
	var ttitle = "";
	var ftitle = "";
	QuizBlockData model = context.GetBlockData(block) ?? new QuizBlockData(new QuizModel(), 1, QuizState.NotPassed);
	if (model.QuizState != QuizState.NotPassed && model.QuizModel.AnswersToQuizes[block.Id].FirstOrDefault() != null)
	{
		var userAnswer = model.QuizModel.AnswersToQuizes[block.Id].Select(x => x.Text).FirstOrDefault() == "True";
		tchecked = userAnswer ? "checked" : "";
		fchecked = userAnswer ? "" : "checked";
		if (model.QuizState == QuizState.Total)
		{
			trueItemClass = block.Answer ? "right-quiz" : userAnswer ? "wrong-quiz" : "";
			falseItemClass = !block.Answer ? "right-quiz" : !userAnswer ? "wrong-quiz" : "";
		}
	}
	if (model.QuizState == QuizState.Total)
	{
		ttitle = (block.Answer ? "Правильный" : "Неправильный") + " вариант";
		ftitle = (!block.Answer ? "Правильный" : "Неправильный") + " вариант";
	}
	var readonlyAttr = context.CanUserFillQuiz ? "" : "disabled";
	<div class="radio quiz-block-mark" id="@( block.Id + "_quizBlock")">
		<div class="quiz">
			<input autocomplete="off" @tchecked id='@( block.Id + "quizBlock" + "True")' name='@( block.Id + "group")' type="radio" @GetGuestDisable(context.IsGuest) @readonlyAttr>
			<label class="@trueItemClass" title="@ttitle" for="@( block.Id + "quizBlock" + "True")" @GetGuestOnclick(context.IsGuest)>Верно</label>
			@if (model.QuizState == QuizState.Total && model.ShowCorrectAnswer && block.Answer)
			{
				<i class="glyphicon glyphicon-ok" style="color: green" title="@ttitle"></i>
			}
		</div>
		<div class="quiz">
			<input autocomplete="off" @fchecked id='@( block.Id + "quizBlock" + "False")' name='@( block.Id + "group")' type="radio" @GetGuestDisable(context.IsGuest) @readonlyAttr>
			<label class="@falseItemClass" title="@ftitle" for="@( block.Id + "quizBlock" + "False")" @GetGuestOnclick(context.IsGuest)>Неверно</label>
			@if (model.QuizState == QuizState.Total && model.ShowCorrectAnswer && !block.Answer)
			{
				<i class="glyphicon glyphicon-ok" style="color: green" title="@ftitle"></i>
			}
		</div>
	</div>
	if (model.QuizState == QuizState.Total && !string.IsNullOrEmpty(block.Explanation))
	{
		<div class="text-muted">@block.Explanation</div>
	}
}

@helper QuizBlock(OrderingBlock block, BlockRenderContext context)
{
	var items = block.ShuffledItems();
	var correctItems = block.Items;
	QuizBlockData model = context.GetBlockData(block) ?? new QuizBlockData(new QuizModel(), 1, QuizState.NotPassed);
	if (model.QuizState != QuizState.NotPassed && model.QuizModel.AnswersToQuizes[block.Id].FirstOrDefault() != null)
	{
		var userAnswers = model.QuizModel.AnswersToQuizes[block.Id].Select(x => x.ItemId).ToList();
		items = items.OrderBy(item => userAnswers.IndexOf(item.GetHash())).ToArray();
	}
	<div class="quiz-block-ordering @( context.CanUserFillQuiz ? "" : "not-movable")" id='@( block.Id + "_quizBlock")' @GetGuestOnclick(context.IsGuest)>
		@if (model.QuizState == QuizState.Total && model.ShowCorrectAnswer)
		{
			<div class="quiz-block-ordering__correct-description row">
				<div class="text-success col-sm-5 col-sm-offset-6">Правильный ответ</div>
			</div>
		}
		<ul>
			@for (var itemIndex = 0; itemIndex < items.Length; itemIndex++)
			{
				var item = items[itemIndex];
				<li class="row">
					<div class="quiz quiz-block-ordering__item col-xs-12 col-sm-5" data-item-id="@item.GetHash()">
						@if (context.CanUserFillQuiz)
						{
							<div class="quiz-block-ordering__item__icons">
								<span class="glyphicon glyphicon-arrow-up"></span>
								<span class="glyphicon glyphicon-arrow-down"></span>
							</div>
						}
						<input autocomplete="off" id='@( block.Id + "quizBlock" + item.GetHash())' type="hidden">
						<div class="text">@item.Text.RenderTex().ToLegacyHtmlString()</div>
					</div>
					@if (model.QuizState == QuizState.Total && model.ShowCorrectAnswer)
					{
						var correctItem = correctItems[itemIndex];
						<div class="quiz-block-ordering__item correct col-xs-12 col-sm-offset-1 col-sm-5">
							@correctItem.Text.RenderTex().ToLegacyHtmlString()
						</div>
					}
				</li>
			}
		</ul>
	</div>
	if (model.QuizState == QuizState.Total && !string.IsNullOrEmpty(block.Explanation))
	{
		<div class="text-muted">@block.Explanation</div>
	}
}

@helper QuizBlock(MatchingBlock block, BlockRenderContext context)
{
	var fixedItems = block.GetMatches(block.ShuffleFixed);
	var movableItems = block.GetMatches(true);

	QuizBlockData model = context.GetBlockData(block) ?? new QuizBlockData(new QuizModel(), 1, QuizState.NotPassed);
	if (model.QuizState != QuizState.NotPassed && model.QuizModel.AnswersToQuizes[block.Id].FirstOrDefault() != null)
	{
		var userAnswers = model.QuizModel.AnswersToQuizes[block.Id];
		fixedItems = GetFixedItemsAccordingToUserAnswers(userAnswers, fixedItems)
			.OrderBy(item => userAnswers.FindIndex(answer => item.GetHashForFixedItem() == answer.ItemId)).ToList();
		movableItems = GetMovableItemsAccordingToUserAnswers(userAnswers, fixedItems);
	}
	<div class="quiz-block-matching @( context.CanUserFillQuiz ? "" : "not-movable")" id='@( block.Id + "_quizBlock")' @GetGuestOnclick(context.IsGuest)>
		@if (model.QuizState == QuizState.NotPassed)
		{
			<div class="quiz-block-matching__description text-muted">
                <span class="visible-xs">
                    Нажмите сначала на&nbsp;блоке из&nbsp;правого столбца, а&nbsp;затем на&nbsp;свободном месте в&nbsp;левом.
                </span>
                <span class="hidden-xs">
                    Перетащите блоки из&nbsp;правого столбца на&nbsp;свободные места.
                </span>
            </div>
		}
		@if (model.QuizState == QuizState.Total)
		{
			<div class="quiz-block-matching__correct-description row">
				<div class="text-muted col-sm-3 col-sm-offset-3">Ваш вариант</div>
				@if (model.ShowCorrectAnswer)
				{
					<div class="text-success col-sm-3 col-xs-offset-1">Правильный вариант</div>
				}
			</div>
		}
		<ul>
			@for (var itemIndex = 0; itemIndex < fixedItems.Count; itemIndex++)
			{
				var fixedItem = fixedItems[itemIndex];
				var movableItem = movableItems[itemIndex];
				var isRightClass = "";
				if (model.QuizState == QuizState.Total && model.ShowCorrectAnswer)
				{
					isRightClass = fixedItem.Id == movableItem.Id ? "right" : "wrong";
				}
				<li>
					<div class="quiz quiz-block-matching__item @isRightClass row">
						<input autocomplete="off" id='@( block.Id + "quizBlock" + fixedItem.GetHashForFixedItem())' type="hidden">
						<div class="quiz-block-matching__fixed-item col-xs-3" data-item-id="@fixedItem.GetHashForFixedItem()">@fixedItem.FixedItem.RenderTex().ToLegacyHtmlString()</div>
						@if (model.QuizState == QuizState.NotPassed)
						{
							<div class="quiz-block-matching__droppable col-xs-3" data-block-id="@block.Id" data-item-id="@fixedItem.GetHashForFixedItem()"></div>
							<div class="quiz-block-matching__source__droppable col-xs-3 col-xs-offset-1 added" data-block-id="@block.Id" data-movable-item-id="@movableItem.GetHashForMovableItem()">
								<div class="quiz-block-matching__movable-item" data-block-id="@block.Id" data-item-id="@movableItem.GetHashForMovableItem()">@movableItem.MovableItem.RenderTex().ToLegacyHtmlString()</div>
							</div>
						}
						else
						{
							<div class="quiz-block-matching__droppable col-xs-3 added" data-block-id="@block.Id" data-item-id="@fixedItem.GetHashForFixedItem()" data-movable-item-id="@movableItem.GetHashForMovableItem()">
								<div class="quiz-block-matching__movable-item" data-block-id="@block.Id" data-item-id="@movableItem.GetHashForMovableItem()">@movableItem.MovableItem.RenderTex().ToLegacyHtmlString()</div>
							</div>
							if (model.QuizState == QuizState.Total && model.ShowCorrectAnswer)
							{
								<div class="quiz-block-matching__fixed-item correct col-xs-3 col-xs-offset-1">
									@fixedItem.MovableItem.RenderTex().ToLegacyHtmlString()
								</div>
							}
							if (context.CanUserFillQuiz)
							{
								<div class="quiz-block-matching__source__droppable col-xs-3 col-xs-offset-1" data-block-id="@block.Id">
								</div>
							}
						}

					</div>
				</li>
			}
		</ul>
	</div>
	if (model.QuizState == QuizState.Total && !string.IsNullOrEmpty(block.Explanation))
	{
		<div class="text-muted">@block.Explanation</div>
	}
}

@helper RunErrors()
{
	<div class="run-result run-service-error">
		<div class="run-verdict label-warning">Ошибка сервера :(</div>
		<pre class="no-rounds"><code class="run-details"></code></pre>
	</div>

	<div class="run-result run-compile-error">
		<div class="run-verdict label-danger">Ошибка компиляции</div>
		<pre class="no-rounds"><code class="run-details"></code></pre>
	</div>

	<div class="run-result run-style-error">
		<div class="run-verdict label-warning">Задача сдана. Осталось исправить стилевые ошибки!</div>
		<pre class="no-rounds"><code class="run-details"></code></pre>
		<div>
			<small>Код со стилевыми ошибками трудно или неприятно читать другим программистам, поэтому он может не пройти код-ревью.</small>
		</div>
	</div>

	<div class="run-result run-wa">
		<div class="run-verdict label-danger">Неверный результат</div>
		<div class="diff-table tablesorter"></div>
	</div>

	<div class="run-result run-wa-no-diff">
		<div class="run-verdict label-danger">Неверный результат</div>
		<pre class="no-rounds"><code class="run-details"></code></pre>
	</div>

	<div class="run-result run-success">
		<div class="run-verdict label-success clearfix">Задача сдана!</div>
		<pre class="no-rounds"><code class="run-details"></code></pre>
	</div>
}


@helper ExerciseControls(ExerciseControlsModel model)
{
	<div class="solution-control btn-group ctrl-group">
		@if (!model.IsCodeEditableAndSendable)
		{
			<button type="button" class="try-again-button btn btn-primary no-rounds exercise-version-link @( model.IsLti ? "exercise-controls_button-long" : "")" data-version-id="-1">
				Ещё раз
			</button>
		}
		else
		{
			<button type="button" class="run-solution-button btn btn-primary no-rounds @( model.IsLti ? "exercise-controls_button-long" : "")" data-url="@( model.RunSolutionUrl)">
				Отправить
			</button>
		}
		@if (!model.DebugView)
		{
			var hints = model.Block.HintsMd;
			<button id="GetHintButton" type="button" class="btn btn-default hints-btn" data-course-id="@( model.CourseId)" data-slide-id="@( model.Slide.Id)" data-hints-count="@( hints.Count)" data-url="@( model.UseHintUrl)">
				Взять подсказку
			</button>
			if (model.CanShowOutput)
			{
				<button type="button" class="show-output-button btn btn-default no-rounds @( model.IsShowOutputButtonActive ? "active" : "")">
					Показать вывод
				</button>
			}
			if (!model.IsLti && !model.HideShowSolutionsButton)
			{
				<button type="button" class="btn btn-default giveup-btn no-rounds" onclick="@( model.AcceptedSolutionsAction)">
					Чужие решения
				</button>
			}
			if (model.IsCodeEditableAndSendable)
			{
				<button type="button" class="btn btn-default reset-btn no-rounds" onclick="cleanUserCode()">
					Начать с начала
				</button>
			}
		}
	</div>
}

@functions
{

	public static string GetGuestOnclick(bool isGuest)
	{
		return isGuest ? "onclick=loginForContinue()" : "";
	}

	public static string GetGuestDisable(bool isGuest)
	{
		return isGuest ? "disabled" : null;
	}

	private static List<MatchingMatch> GetFixedItemsAccordingToUserAnswers(List<UserQuiz> userAnswers, List<MatchingMatch> fixedItems)
	{
		var filteredFixedItems = new List<MatchingMatch>();
		foreach (var fixedItem in fixedItems)
		{
			var userAnswered = userAnswers.Any(answer => answer.ItemId == fixedItem.GetHashForFixedItem());
			if (userAnswered)
				filteredFixedItems.Add(fixedItem);
		}
		return filteredFixedItems;
	}

	private static List<MatchingMatch> GetMovableItemsAccordingToUserAnswers(List<UserQuiz> userAnswers, List<MatchingMatch> fixedItems)
	{
		var movableItems = new List<MatchingMatch>();
		foreach (var fixedItem in fixedItems)
		{
			var userAnswer = userAnswers.FirstOrDefault(answer => answer.ItemId == fixedItem.GetHashForFixedItem());
			if (userAnswer != null)
				movableItems.Add(fixedItems.FirstOrDefault(item => item.GetHashForMovableItem() == userAnswer.Text));
		}
		return movableItems;
	}

}