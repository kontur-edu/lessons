@using System.Web.UI.WebControls
@using Database.Models
@using uLearn.Web.Extensions
@using Ulearn.Common
@using Ulearn.Common.Extensions
@using Ulearn.Core.Courses.Slides
@using Ulearn.Core.Courses.Slides.Exercises
@using Ulearn.Core.Courses.Slides.Quizzes
@using Ulearn.Core.Extensions
@using FormMethod = System.Web.Mvc.FormMethod
@using SelectListItem = System.Web.Mvc.SelectListItem

@model UnitStatisticPageModel
@{
	ViewBag.Title = Model.Unit.Title;
}

@functions
{

	bool IsSlideHiddenOnSmallScreens(Slide slide)
	{
		if (slide is QuizSlide)
			return !((QuizSlide)slide).ManualChecking;

		if (slide is ExerciseSlide)
			return !((ExerciseSlide)slide).Scoring.RequireReview;
		return true;
	}

}

@helper UsersByCountVisitedSlidesTable(string id, Dictionary<int, int> data)
{
	<table id="@id" class="hidden">
		<thead>
		<tr>
			<th>Просмотренных слайдов</th>
			<th>Количество человек</th>
		</tr>
		</thead>
		<tbody>
		@for (var countVisitedSlides = 0; countVisitedSlides <= Model.Slides.Count; countVisitedSlides++)
		{
			<tr>
				<td>@countVisitedSlides</td>
				<td>@data.GetOrDefault(countVisitedSlides, 0)</td>
			</tr>
		}
		</tbody>
	</table>
}

<body>
<div class="container">

<h2>
	@Model.Unit.Title.TruncateWithEllipsis(35)

	<small>
		<a href="#filters" class="visible-xs-inline ml10" data-toggle="true" data-scroll="false">
			<span class="no-underline glyphicon glyphicon-filter"></span>
		</a>
	</small>
	<br class="visible-xs"/>
	<small class="visible-xs">с @Model.PeriodStart.ToShortDateString() по @Model.PeriodFinish.ToShortDateString()</small>
</h2>
<div class="analytics__dashboard">
@using (Html.BeginForm("UnitStatistics", "Analytics", FormMethod.Get, new { @class = "form-inline", id = "unit-statistics-filter-form" }))
{
	@Html.Hidden("courseId", Model.Course.Id)

	<div id="filters" class="hidden-xs-inline">
		<div class="form-group">
			@Html.DropDownList("unitId",
				Model.Units.Select(unit => new SelectListItem { Text = unit.Title, Selected = unit == Model.Unit, Value = unit.Id.ToString() }),
				new { @class = "form-control selectpicker show-tick" })
		</div>

		<div class="form-group sm-ml10 ib">
			с @Html.TextBox("periodStart", Model.PeriodStart.ToString("dd.MM.yyyy"), new { @class = "form-control form-control-date datetimepicker ib" })
		</div>

		<div class="form-group ib">
			по @Html.TextBox("periodFinish", Model.PeriodFinish.ToString("dd.MM.yyyy"), new { @class = "form-control form-control-date datetimepicker ib" })
		</div>

		@Html.Partial("~/Views/Shared/_GroupsFilter.cshtml", new GroupsFilterViewModel
		{
			CourseId = Model.Course.Id,
			SelectedGroupsIds = Model.SelectedGroupsIds,
			Groups = Model.Groups,
		})

		<div class="form-group">
			<button role="button" class="btn btn-primary">Отфильтровать</button>
		</div>
	</div>
}

<div class="row">
	<div class="col-xs-12 col-md-6">
		<h2 class="internal-page-menu">
			Слайды
			<a href="#statistics" class="internal-page-link visible-xs-inline">Статистика</a>
			<a href="#students" class="internal-page-link visible-xs-inline">Студенты</a>
		</h2>
		<div class="small-table__title">
			<span class="navbar-label navbar-label-link glyphicon glyphicon-none"></span>
			<span class="small-table__title__cell">слайд</span>
			<div class="pull-right">
				<span class="stat-title small-table__title__cell">просмотры</span>
				<span class="stat-title small-table__title__cell"></span>
			</div>
		</div>
		@foreach (var slide in Model.Slides)
		{
			<div>
				@if (slide is QuizSlide)
				{
					<span class="navbar-label navbar-label-link glyphicon glyphicon-pushpin"></span>
				}
				else if (slide is ExerciseSlide)
				{
					<span class="navbar-label navbar-label-link glyphicon glyphicon-edit"></span>
				}
				else
				{
					<span class="navbar-label navbar-label-link glyphicon glyphicon-none"></span>
				}

				@Html.RouteLink(slide.Title.TruncateWithEllipsis(35), "Course.SlideById", new { Model.Course.Id, SlideId = slide.Url }, new { })
				<div class="pull-right">
					<span class="slide-visits-count">
						@Model.SlidesVisits.GetOrDefault(slide.Id, new List<Visit>()).Count
					</span>

					@if (slide is QuizSlide)
					{
						var average = Model.QuizzesAverageScore[slide.Id];
						if (average < 0)
						{
							<span class="quiz-average">&ndash;</span>
						}
						else
						{
							<span class="quiz-average" title="Средний процент полученных баллов">@average%</span>
						}
					}
					else if (slide is ExerciseSlide)
					{
						var tries = Model.ExercisesSolutionsCount.GetOrDefault(slide.Id, 0);
						var acceptedTries = Model.ExercisesAcceptedSolutionsCount.GetOrDefault(slide.Id, 0);
						if (tries == 0)
						{
							<span class="exercise-tries" title="Нет попыток">&ndash;</span>
						}
						else
						{
							var acceptedPercent = acceptedTries * 100 / tries;
							<span class="exercise-tries" title="Успешных попыток: @acceptedTries/@tries">@acceptedPercent%</span>
						}
					}
					else
					{
						<span class="lesson-slide-no-stat"></span>
					}
				</div>
			</div>
		}
	</div>

	<div class="col-xs-12 col-md-6" id="statistics">
		<h2>Статистика</h2>
		<div>
			Всего посмотрели весь модуль к&nbsp;@Model.PeriodFinish.ToDatePrettyString(true):
			<strong>
				@Model.UsersVisitedAllSlidesBeforePeriodFinishedCount
			</strong>
		</div>
		<div>
			Посмотрели весь модуль <strong>за&nbsp;выбранный период</strong>: <strong>@Model.UsersVisitedAllSlidesInPeriodCount</strong>
		</div>

		<div class="vspace-20"></div>

		@{
			var usersByCountVisitedSlides = Model.VisitedSlidesCountByUser
				.GroupBy(p => p.Value, p => p.Key)
				.ToDictionary(g => g.Key, g => g.Count());
			var usersByCountVisitedSlidesAllTime = Model.VisitedSlidesCountByUserAllTime
				.GroupBy(p => p.Value, p => p.Key)
				.ToDictionary(g => g.Key, g => g.Count());
		}
		@UsersByCountVisitedSlidesTable("usersByCountVisitedSlides", usersByCountVisitedSlides)
		@UsersByCountVisitedSlidesTable("usersByCountVisitedSlidesAllTime", usersByCountVisitedSlidesAllTime)

		<div class="analytics__chart__toggles">
			Показать график:
			<a href="#usersByCountVisitedSlides" class="analytics__chart__toggle internal-page-link active">за&nbsp;выбранный период</a>
			<a href="#usersByCountVisitedSlidesAllTime" class="analytics__chart__toggle internal-page-link">за&nbsp;всё время</a>
		</div>

		<div id="usersByCountVisitedSlidesChart"></div>
	</div>
</div>

<div class="vspace-20 hidden-xs hidden-sm"></div>

<div class="row" id="students">
	<div class="col-xs-12">
		@{
			var exercisesAndQuizzes = Model.Slides.Where(s => s is QuizSlide || s is ExerciseSlide).OrderBy(s => s.Index).ToList();
			var modifiableScoringGroups = Model.Unit.Scoring.Groups.Values.Where(g => g.CanBeSetByInstructor).ToList();
		}

		<h2>Студенты</h2>
		
		<table id="unit-statistics-students-table">
			<tr class="small-table__title">
			<td class="small-table__title__cell">пользователь</td>
				<td class="small-table__title__cell small-table__student-progress-cell hidden-xs-table-cell">прогресс</td>
				@foreach (var slide in exercisesAndQuizzes)
				{
					var isHiddenOnSmallScreens = IsSlideHiddenOnSmallScreens(slide);
					if (slide is QuizSlide)
					{
						<td class="glyphicon glyphicon-pushpin small-table__title__cell @(isHiddenOnSmallScreens ? "hidden-xs-table-cell" : "")" title="@slide.Title"></td>
					}
					else if (slide is ExerciseSlide)
					{
						<td class="glyphicon glyphicon-edit small-table__title__cell @(isHiddenOnSmallScreens ? "hidden-xs-table-cell" : "")" title="@slide.Title"></td>
					}
				}

				@foreach (var scoringGroup in modifiableScoringGroups)
				{
					<td class="small-table__title__cell" title="@scoringGroup.Name — @scoringGroup.MaxAdditionalScore.PluralizeInRussian(new RussianPluralizationOptions { One = "балл", Two = "балла", Five = "баллов", Gender = Gender.Male, hideNumberOne = false, smallNumbersAreWords = false })">
						@scoringGroup.Abbreviation (@scoringGroup.MaxAdditionalScore)
					</td>
				}
			</tr>

			@foreach (var userInfo in Model.VisitedUsers)
			{
				var visitedSlidesCount = Model.VisitedSlidesCountByUser.GetOrDefault(userInfo.UserId, 0);
				var visitedSlidesCountAllTime = Model.VisitedSlidesCountByUserAllTime.GetOrDefault(userInfo.UserId, 0);
				var userVisibleName = userInfo.UserVisibleName != "" ? userInfo.UserVisibleName : userInfo.UserName;
				var userGroupsIds = Model.UsersGroupsIds.GetOrDefault(userInfo.UserId, new List<int>());
				var userModifiableScoringGroupsIds = Model.EnabledAdditionalScoringGroupsForGroups
					.Where(kv => userGroupsIds.Contains(kv.Key))
					.SelectMany(kv => kv.Value)
					.ToList();

					<tr class="student">
						<td class="small-table__student-name-cell" title="@userInfo.UserName">
							@Html.ActionLink(userVisibleName.TruncateWithEllipsis(25), "UserUnitStatistics", new { courseId = Model.Course.Id, unitId = Model.Unit.Id, userId = userInfo.UserId }, new { title = "Посмотреть статистику пользователя " + userInfo.UserName })
						</td>
						<td class="small-table__student-progress-cell hidden-xs-table-cell">
							<div class="student-progress progress">
								<div class="progress-bar progress-bar-warning"
									style="width: @(100 * (visitedSlidesCountAllTime - visitedSlidesCount) / Model.Slides.Count)%"
									title="Посмотрел(а) @((visitedSlidesCountAllTime - visitedSlidesCount).PluralizeInRussian(new RussianPluralizationOptions
									                      {
										                      One = "слайд",
										                      Two = "слайда",
										                      Five = "слайдов",
										                      Gender = Gender.Male
									                      })) вне указанного период">
								</div>
								<div class="progress-bar progress-bar-success"
									style="width: @(100 * visitedSlidesCount / Model.Slides.Count)%"
									title="Посмотрел(а) @visitedSlidesCount.PluralizeInRussian(new RussianPluralizationOptions
									                    {
										                    One = "слайд",
										                    Two = "слайда",
										                    Five = "слайдов",
										                    Gender = Gender.Male
									                    }) в указанный период">
								</div>
							</div>
						</td>
						
						@foreach (var exerciseOrQuiz in exercisesAndQuizzes)
						{
							var visit = Model.SlidesVisits.GetOrDefault(exerciseOrQuiz.Id, new List<Visit>()).FirstOrDefault(v => v.UserId == userInfo.UserId);
							var isHiddenOnSmallScreens = IsSlideHiddenOnSmallScreens(exerciseOrQuiz);
							if (visit != null && visit.IsPassed)
							{
								var isFullScore = visit.Score == exerciseOrQuiz.MaxScore;
								<td class="small-table__right-cell score @(isHiddenOnSmallScreens ? "hidden-xs-table-cell" : "") @(isFullScore ? "full-score" : "") @(visit.Score == 0 ? "zero-score" : "")" title="@visit.Timestamp.ToPrettyString()">
									@if (exerciseOrQuiz is ExerciseSlide)
									{
										@Html.ActionLink(
											visit.Score.ToString(),
											"UserSolutions",
											"Analytics",
											new { courseId = Model.Course.Id, slideId = exerciseOrQuiz.Id, userId = userInfo.UserId },
											new { title = "Посмотреть решения", target = "_blank" })
									}
									else
									{
										@visit.Score
									}
								</td>
							}
							else
							{
								<td class="small-table__right-cell score @(isHiddenOnSmallScreens ? "hidden-xs-table-cell" : "") zero-score">&nbsp;</td>
							}
						}

						@foreach (var scoringGroup in modifiableScoringGroups)
						{
							var userAndScoringGroup = Tuple.Create(userInfo.UserId, scoringGroup.Id);
							var isModifiableForUser = scoringGroup.EnabledForEveryone || userModifiableScoringGroupsIds.Contains(scoringGroup.Id);
							<td class="small-table__title__cell additional-score">
								@if (isModifiableForUser)
								{
									<a href="#" class="internal-page-link additional-score-link" title="Изменить оценку «@scoringGroup.Name»" data-scoring-type="@scoringGroup.Id">
										@if (Model.AdditionalScores.ContainsKey(userAndScoringGroup))
										{
											@Model.AdditionalScores[userAndScoringGroup]
										}
										else
										{
											<span>&mdash;</span>
										}
									</a>
									<input name="additional-score"
											class="form-control input-sm additional-score-input"
											min="0"
											max="@scoringGroup.MaxAdditionalScore"
											value="@(Model.AdditionalScores.ContainsKey(userAndScoringGroup) ? Model.AdditionalScores[userAndScoringGroup].ToString() : "")"
											data-scoring-type="@scoringGroup.Id"
											data-url="@Url.Action("SetAdditionalScore", "Admin", new { courseId = Model.Course.Id, unitId = Model.Unit.Id, userId = userInfo.UserId, scoringGroupId = scoringGroup.Id })"/>
								}
							</td>
						}
					</tr>
			}
		</table>
		@if (!Model.VisitedUsers.Any())
		{
			<div class="text-muted">Здесь пока никого не было.</div>
		}
		@if (modifiableScoringGroups.Count > 0)
		{
			<div class="additional-scores__edit-mode__control pull-right">
				<button class="btn btn-success btn-sm additional-scores__edit-mode__save-button">Сохранить баллы</button>
			</div>
		}
	</div>
</div>

@if (Model.VisitedUsersIsMore)
{
	<div class="text-muted">
		Показаны <b>200</b> лучших студентов
	</div>
}
</div>
</div>
</body>