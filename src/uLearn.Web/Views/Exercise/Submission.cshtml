@using uLearn
@using uLearn.Web.Controllers
@using uLearn.Web.Extensions
@using uLearn.Web.Views.Course

@model ExerciseBlockData

@{
	var manualCheckingId = Model.ManualChecking != null ? (int?)Model.ManualChecking.Id : null;
}

<div class="exercise__submission"
	 data-version-update-url="@Url.Action("Submission", new { Model.CourseId, slideId = Model.Slide.Id, submissionId = "VERSION_ID", manualCheckingId = manualCheckingId, isLti = Model.IsLti, showOutput = Model.InstructorView ? "true" : "SHOW_OUTPUT", instructorView = Model.InstructorView, onlyAccepted = Model.ShowOnlyAccepted })"
	 @SlideHtml.GetGuestOnclick(Model.IsGuest)>
	@{
		var currentSubmissionId = Model.SubmissionSelectedByUser != null ? (int?)Model.SubmissionSelectedByUser.Id : null;

		@Html.Partial("SubmissionsPanel", new ExerciseSubmissionsPanelModel(Model.CourseId, Model.Slide)
		{
			Submissions = Model.Submissions,
			CurrentSubmissionId = currentSubmissionId,
			CanTryAgain = !Model.InstructorView,
		})

		var classString = Model.IsGuest ? "code-guest" : "code-exercise";
		var canAddReviews = false;
		if (Model.ManualChecking != null && Model.ManualChecking.SubmissionId == currentSubmissionId)
		{
			classString = "code-review";
			canAddReviews = true;
		}
		else if (Model.SubmissionSelectedByUser != null)
		{
			classString = "code-reviewed";
		}

		if (Model.SubmissionSelectedByUser != null)
		{
			var status = "";
			var statusClass = "";
			if (Model.ReviewState == ExerciseReviewState.WaitingForReview)
			{
				status = "Все тесты пройдены, код ожидает проверки преподавателем";
				if (Model.InstructorView)
				{
					status = string.Format(
						"Все тесты пройдены, код ожидает <a href=\"{0}\" title=\"Перейти к проверке\">проверки преподавателем</a>",
						Url.Action("CheckExercise", "Admin", new { courseId = Model.CourseId, id = Model.SubmissionSelectedByUser.ManualCheckings.Last().Id })
						);
				}
			}
			else if (Model.ReviewState == ExerciseReviewState.Reviewed)
			{
				var score = Model.SubmissionSelectedByUser.ManualCheckings.Max(c => c.Score);
				var pluralizedScore = score.PluralizeInRussian(new RussianPluralizationOptions
				{
					One = "балл",
					Two = "балла",
					Five = "баллов",
					Gender = Gender.Male,
					hideNumberOne = false,
					smallNumbersAreWords = false,
				});
				if (Model.InstructorView)
				{
					status = string.Format("Все тесты пройдены, код <a href=\"{0}\" title=\"Отредактировать код-ревью\">проверен преподавателем</a> ({1})",
						Url.Action("CheckExercise", "Admin", new { courseId = Model.CourseId, id = Model.SubmissionSelectedByUser.ManualCheckings.Last().Id, recheck = true }),
						pluralizedScore);
				}
				else
				{
					status = string.Format("Все тесты пройдены, код проверен преподавателем ({0})", pluralizedScore);
				}
			}
			else if (Model.SubmissionSelectedByUser.AutomaticCheckingIsRightAnswer)
			{
				status = "Все тесты пройдены";
				if (!Model.Slide.Exercise.RequireReview)
				{
					status += ", задача сдана";
				}
			}
			else if (Model.SubmissionSelectedByUser.AutomaticChecking != null && Model.SubmissionSelectedByUser.AutomaticChecking.Status != AutomaticExerciseCheckingStatus.Done)
			{
				status = "Проверяется: " + Model.SubmissionSelectedByUser.AutomaticChecking.Status;
				statusClass = "waiting";
			}
			else if (Model.SubmissionSelectedByUser.AutomaticChecking != null)
			{
				status = "Результат проверки: " + Model.SubmissionSelectedByUser.AutomaticChecking.GetVerdict();
				statusClass = "wrong";
			}
			if (!string.IsNullOrEmpty(status) && (Model.ManualChecking == null || Model.ManualChecking.SubmissionId != Model.SubmissionSelectedByUser.Id))
			{
				<p class="exercise-status @statusClass">@Html.Raw(status)</p>
			}
		}

		if (Model.ReviewState == ExerciseReviewState.Reviewed || Model.InstructorView)
		{
			/* For reviewed submission without reviews don't show reviews panel at all*/
			var isEmpty = Model.Reviews.Count == 0 && ! canAddReviews ? "empty" : "";
			<div class="exercise__reviews @isEmpty">
				@foreach (var review in Model.Reviews.OrderBy(r => r.StartLine).ThenBy(r => r.StartPosition))
				{
					@Html.Partial("_ExerciseReview", new ExerciseCodeReviewModel
					{
						Review = review,
						ManualChecking = Model.ManualChecking,
					})
				}
			</div>
		}
		<textarea id="secretCodeExercise" class="hide">@Model.Block.ExerciseInitialCode.EnsureEnoughLines(4)</textarea>
		<textarea class="code @classString hidden" data-lang="@Model.Block.LangId">@(Model.Solution ?? Model.Block.ExerciseInitialCode.EnsureEnoughLines(4))</textarea>
		<div class="loading-spinner">
			<img src="/Content/loading.gif" />
		</div>
		<script type="text/javascript">
			function cleanUserCode() {
				var $secretCodeExercise = $('#secretCodeExercise');
				$('.code-exercise')[0].codeMirrorEditor.setValue($secretCodeExercise.text());
			}
		</script>

		if (Model.ShowControls)
		{
			if (!Model.InstructorView)
			{
				var acceptedSolutionsUrl = Model.Url != null
					? Model.Url.Action("AcceptedSolutions", "Course", new { courseId = Model.CourseId, slideId = Model.Slide.Id })
					: "";
				var acceptedSolutionsAction = Model.CanSkip ? "$('#ShowSolutionsAlert').modal('show')" : string.Format("window.location='{0}'", acceptedSolutionsUrl);
				@SlideHtml.ExerciseControls(new ExerciseControlsModel(Model.CourseId, Model.Slide)
				{
					IsLti = Model.IsLti,
					IsCodeEditableAndSendable = Model.SubmissionSelectedByUser == null,
					CanShowOutput = Model.SubmissionSelectedByUser != null,
					IsShowOutputButtonActive = Model.ShowOutputImmediately,
					AcceptedSolutionsAction = acceptedSolutionsAction,
					RunSolutionUrl = Model.RunSolutionUrl,
					UseHintUrl = Url.Action("UseHint", "Hint"),
				})

				@SlideHtml.RunErrors()

				if (!Model.IsLti)
				{
					@YouWillLoseScoresDialog(Model)
				}
			}

			if (Model.ManualChecking == null && 
				Model.SubmissionSelectedByUser != null &&
				Model.SubmissionSelectedByUser.AutomaticChecking != null &&
				Model.SubmissionSelectedByUser.AutomaticChecking.Output != null)
			{
				var style = Model.ShowOutputImmediately ? "" : "display: none";
				var isEmpty = string.IsNullOrEmpty(Model.SubmissionSelectedByUser.AutomaticChecking.Output.Text);
				<div id="exercise__submission__output" class="@(isEmpty ? "empty" : "")" style="@style">
					@Html.Raw(Html.EncodeMultiLineText(Model.SubmissionSelectedByUser.AutomaticChecking.Output.Text))
				</div>
			}
		}
	}
</div>

<div class="panel-group ctrl-group" id="hints-accordion">
	<div id="hints-place"></div>
</div>

@if (Model.ManualChecking != null)
{
	@Html.Partial("_TopUserReviewComments", Model)
}

@if (Model.ManualChecking == null && User.HasAccessFor(Model.CourseId, CourseRole.CourseAdmin))
{
	@Html.Action("SlideCodeReviewComments", "Exercise", new { courseId = Model.CourseId, slideId = Model.Slide.Id })
}

@helper YouWillLoseScoresDialog(ExerciseBlockData data)
{
	var acceptedSolutionsUrl = data.Url != null
		? data.Url.Action("AcceptedSolutions", "Course", new { data.CourseId, slideId = data.Slide.Id })
		: "";
	<div class="modal fade" id="ShowSolutionsAlert" tabindex="-1" role="dialog" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
					<h4 class="modal-title">Внимание</h4>
				</div>
				<div class="modal-body">
					<p>Вы потеряете возможность получить баллы за эту задачу, если продолжите.</p>
				</div>
				<div class="modal-footer">
					<a class="btn btn-default" href="@acceptedSolutionsUrl">Продолжить</a>
					<button type="button" class="btn btn-primary" data-dismiss="modal">Отмена</button>
				</div>
			</div>
		</div>
	</div>
}
